Python files found: 
['C:\\Users\\t.kubera\\dev\\hackathon\\targets\\IIRA\\app.py', 'C:\\Users\\t.kubera\\dev\\hackathon\\targets\\IIRA\\__init__.py', 'C:\\Users\\t.kubera\\dev\\hackathon\\targets\\IIRA\\core\\create_analyses.py', 'C:\\Users\\t.kubera\\dev\\hackathon\\targets\\IIRA\\core\\fileinteraction.py', 'C:\\Users\\t.kubera\\dev\\hackathon\\targets\\IIRA\\core\\metrics.py', 'C:\\Users\\t.kubera\\dev\\hackathon\\targets\\IIRA\\core\\__init__.py', 'C:\\Users\\t.kubera\\dev\\hackathon\\targets\\IIRA\\data\\__init__.py', 'C:\\Users\\t.kubera\\dev\\hackathon\\targets\\IIRA\\gui\\analyseframe.py', 'C:\\Users\\t.kubera\\dev\\hackathon\\targets\\IIRA\\gui\\containerframe.py', 'C:\\Users\\t.kubera\\dev\\hackathon\\targets\\IIRA\\gui\\fileframes.py', 'C:\\Users\\t.kubera\\dev\\hackathon\\targets\\IIRA\\gui\\helperframes.py', 'C:\\Users\\t.kubera\\dev\\hackathon\\targets\\IIRA\\gui\\mainframe.py', 'C:\\Users\\t.kubera\\dev\\hackathon\\targets\\IIRA\\gui\\rateframe.py', 'C:\\Users\\t.kubera\\dev\\hackathon\\targets\\IIRA\\gui\\__init__.py']
Read file_path:  C:\Users\t.kubera\dev\hackathon\targets\IIRA\app.py
Read code:
__author__ = "Timo Kubera"
__email__ = "timo.kubera@stud.uni-hannover.de"

import os
import tkinter as tk
from tkinter import ttk

from gui.mainframe import MainFrame
from gui.fileframes import FileFrame, ScaleFrame
from gui.analyseframe import AnalyseFrame, ResultsFrame
from gui.rateframe import RateFrame
from core.fileinteraction import DBInteraction

from PIL import ImageTk

file_path = os.path.dirname(os.path.realpath(__file__))

class App(tk.Tk):

    def __init__(self):
        super().__init__()
        self.load_icons()

        self.filevalidation = None
        self.dbinteraction = DBInteraction(os.path.join(file_path, "data/internal_db.csv"))
        self.scale_format = ""      # Skalenformate sind nominal, ordinal, intervall und ratio.
        self.weights = ""
        
        self.categories = []
        self.rater_ids = []
        self.text = []
        self.formatted_text = []
        self.labels = {} # Label pro Text und Rater

        self.title("IIRA")
        self.geometry("1500x750")
        self.minsize(1450, 750)

        self.rowconfigure(0, weight=1)
        self.columnconfigure(0, weight=1)
        self.light_mode = True
        self.mode = None

        self.tk.call("source", os.path.join(file_path, "data/themes/forest-light.tcl"))
        self.style = ttk.Style()

        self.style.theme_use("forest-light")

        self.frames = {} 
        self.init_frames()
        self.show_frame("MainFrame")
    
    def show_frame(self, frame_name):
        frame = self.frames[frame_name]
        frame.tkraise()
    
    def load_icons(self):
        self.app_icon = ImageTk.PhotoImage(file=os.path.join(file_path, "data/icons/intrarater_512px.png"))
        self.file_select_icon = ImageTk.PhotoImage(file=os.path.join(file_path, "data/icons/file_select.png"))
        self.home_icon = ImageTk.PhotoImage(file=os.path.join(file_path, "data/icons/home_32px.png"))
        self.profile_icon = ImageTk.PhotoImage(file=os.path.join(file_path, "data/icons/profile_32px.png"))
        self.help_icon = ImageTk.PhotoImage(file=os.path.join(file_path, "data/icons/help_32px.png"))
        self.face_icon = ImageTk.PhotoImage(file=os.path.join(file_path, "data/icons/face_32px.png"))
        self.rate_icon = ImageTk.PhotoImage(file=os.path.join(file_path, "data/icons/rate.png"))
        self.analyse_icon = ImageTk.PhotoImage(file=os.path.join(file_path, "data/icons/analyse.png"))
        self.tooltip_icon = ImageTk.PhotoImage(file=os.path.join(file_path, "data/icons/tooltip-16px.png"))
        self.save_icon = ImageTk.PhotoImage(file=os.path.join(file_path, "data/icons/save_32px.png"))
        self.delete_icon = ImageTk.PhotoImage(file=os.path.join(file_path, "data/icons/delete_32px.png"))
        
        self.light_icon = ImageTk.PhotoImage(file=os.path.join(file_path, "data/icons/light_mode_32px.png"))
        self.dark_icon = ImageTk.PhotoImage(file=os.path.join(file_path, "data/icons/dark_mode.png"))
        self.unchecked_icon = ImageTk.PhotoImage(file=os.path.join(file_path, "data/themes/forest-light/check-unsel-accent.png"))
        self.checked_icon = ImageTk.PhotoImage(file=os.path.join(file_path, "data/themes/forest-light/check-accent.png"))

    def init_root_frame(self, frame):
        frame.grid(row=0, column=0, sticky="nsew")
    
    def init_frames(self):
        for frame in self.frames:
            for widget in self.frames[frame].winfo_children():
                widget.destroy()

        main_frame = MainFrame(self)
        self.init_root_frame(main_frame)
        self.frames["MainFrame"] = main_frame

        scale_frame = ScaleFrame(self)
        self.init_root_frame(scale_frame)
        self.frames["ScaleFrame"] = scale_frame

        file_frame = FileFrame(self)
        self.init_root_frame(file_frame)
        self.frames["FileFrame"] = file_frame

        rate_frame = RateFrame(self)
        self.init_root_frame(rate_frame)
        self.frames["RateFrame"] = rate_frame

        restults_frame = ResultsFrame(self)
        self.init_root_frame(restults_frame)
        self.frames["ResultsFrame"] = restults_frame

        analyse_frame = AnalyseFrame(self)
        self.init_root_frame(analyse_frame)
        self.frames["AnalyseFrame"] = analyse_frame



if __name__ == "__main__":
  app = App()
  app.mainloop()
Prompt:
 Human:
Create module and class based docstrings for the following source code (delimited by ####).
Use this docstring the google docstrings coding convention.

####
__author__ = \"Timo Kubera\"
__email__ = \"timo.kubera@stud.uni-hannover.de\"

import os
import tkinter as tk
from tkinter import ttk

from gui.mainframe import MainFrame
from gui.fileframes import FileFrame, ScaleFrame
from gui.analyseframe import AnalyseFrame, ResultsFrame
from gui.rateframe import RateFrame
from core.fileinteraction import DBInteraction

from PIL import ImageTk

file_path = os.path.dirname(os.path.realpath(__file__))

class App(tk.Tk):

    def __init__(self):
        super().__init__()
        self.load_icons()

        self.filevalidation = None
        self.dbinteraction = DBInteraction(os.path.join(file_path, \"data/internal_db.csv\"))
        self.scale_format = \"\"      # Skalenformate sind nominal, ordinal, intervall und ratio.
        self.weights = \"\"
        
        self.categories = []
        self.rater_ids = []
        self.text = []
        self.formatted_text = []
        self.labels = {} # Label pro Text und Rater

        self.title(\"IIRA\")
        self.geometry(\"1500x750\")
        self.minsize(1450, 750)

        self.rowconfigure(0, weight=1)
        self.columnconfigure(0, weight=1)
        self.light_mode = True
        self.mode = None

        self.tk.call(\"source\", os.path.join(file_path, \"data/themes/forest-light.tcl\"))
        self.style = ttk.Style()

        self.style.theme_use(\"forest-light\")

        self.frames = {} 
        self.init_frames()
        self.show_frame(\"MainFrame\")
    
    def show_frame(self, frame_name):
        frame = self.frames[frame_name]
        frame.tkraise()
    
    def load_icons(self):
        self.app_icon = ImageTk.PhotoImage(file=os.path.join(file_path, \"data/icons/intrarater_512px.png\"))
        self.file_select_icon = ImageTk.PhotoImage(file=os.path.join(file_path, \"data/icons/file_select.png\"))
        self.home_icon = ImageTk.PhotoImage(file=os.path.join(file_path, \"data/icons/home_32px.png\"))
        self.profile_icon = ImageTk.PhotoImage(file=os.path.join(file_path, \"data/icons/profile_32px.png\"))
        self.help_icon = ImageTk.PhotoImage(file=os.path.join(file_path, \"data/icons/help_32px.png\"))
        self.face_icon = ImageTk.PhotoImage(file=os.path.join(file_path, \"data/icons/face_32px.png\"))
        self.rate_icon = ImageTk.PhotoImage(file=os.path.join(file_path, \"data/icons/rate.png\"))
        self.analyse_icon = ImageTk.PhotoImage(file=os.path.join(file_path, \"data/icons/analyse.png\"))
        self.tooltip_icon = ImageTk.PhotoImage(file=os.path.join(file_path, \"data/icons/tooltip-16px.png\"))
        self.save_icon = ImageTk.PhotoImage(file=os.path.join(file_path, \"data/icons/save_32px.png\"))
        self.delete_icon = ImageTk.PhotoImage(file=os.path.join(file_path, \"data/icons/delete_32px.png\"))
        
        self.light_icon = ImageTk.PhotoImage(file=os.path.join(file_path, \"data/icons/light_mode_32px.png\"))
        self.dark_icon = ImageTk.PhotoImage(file=os.path.join(file_path, \"data/icons/dark_mode.png\"))
        self.unchecked_icon = ImageTk.PhotoImage(file=os.path.join(file_path, \"data/themes/forest-light/check-unsel-accent.png\"))
        self.checked_icon = ImageTk.PhotoImage(file=os.path.join(file_path, \"data/themes/forest-light/check-accent.png\"))

    def init_root_frame(self, frame):
        frame.grid(row=0, column=0, sticky=\"nsew\")
    
    def init_frames(self):
        for frame in self.frames:
            for widget in self.frames[frame].winfo_children():
                widget.destroy()

        main_frame = MainFrame(self)
        self.init_root_frame(main_frame)
        self.frames[\"MainFrame\"] = main_frame

        scale_frame = ScaleFrame(self)
        self.init_root_frame(scale_frame)
        self.frames[\"ScaleFrame\"] = scale_frame

        file_frame = FileFrame(self)
        self.init_root_frame(file_frame)
        self.frames[\"FileFrame\"] = file_frame

        rate_frame = RateFrame(self)
        self.init_root_frame(rate_frame)
        self.frames[\"RateFrame\"] = rate_frame

        restults_frame = ResultsFrame(self)
        self.init_root_frame(restults_frame)
        self.frames[\"ResultsFrame\"] = restults_frame

        analyse_frame = AnalyseFrame(self)
        self.init_root_frame(analyse_frame)
        self.frames[\"AnalyseFrame\"] = analyse_frame



if __name__ == \"__main__\":
  app = App()
  app.mainloop()
####

AI:

['```python\n"""\nThis module provides the main application interface for the IIRA (Intra-Rater Reliability Analysis) tool.\n\nThe IIRA tool is designed to facilitate the analysis of intra-rater reliability, allowing users to load,\nrate, and analyze text data based on various scales and criteria. It supports functionalities such as\nfile selection, data rating, analysis of results, and more, through a graphical user interface built\nusing Tkinter.\n\nAttributes:\n    __author__ (str): The author of the module.\n    __email__ (str): The email address of the author.\n\nTodo:\n    * Implement dark mode functionality.\n    * Extend support for additional data formats.\n    * Improve error handling and user feedback mechanisms.\n\nExample:\n    To run the application, execute this module directly:\n\n        $ python this_module.py\n\n"""\n\n__author__ = "Timo Kubera"\n__email__ = "timo.kubera@stud.uni-hannover.de"\n\nimport os\nimport tkinter as tk\nfrom tkinter import ttk\n\nfrom gui.mainframe import MainFrame\nfrom gui.fileframes import FileFrame, ScaleFrame\nfrom gui.analyseframe import AnalyseFrame, ResultsFrame\nfrom gui.rateframe import RateFrame\nfrom core.fileinteraction import DBInteraction\n\nfrom PIL import ImageTk\n\nfile_path = os.path.dirname(os.path.realpath(__file__))\n\nclass App(tk.Tk):\n    """A class representing the main application window of the IIRA tool.\n\n    This class initializes the main application window, loads necessary icons, and sets up the\n    interface frames for different functionalities such as file selection, rating, and analysis.\n\n    Attributes:\n        filevalidation (NoneType): Placeholder for future file validation functionality.\n        dbinteraction (DBInteraction): Handles interactions with the internal database.\n        scale_format (str): Represents the format of scales used in rating (nominal, ordinal, etc.).\n        weights (str): Placeholder for future functionality to handle weights.\n        categories (list): A list to store categories of analysis.\n        rater_ids (list): A list to store identifiers for raters.\n        text (list): A list to store text data for analysis.\n        formatted_text (list): A list to store formatted text data.\n        labels (dict): A dictionary to store labels for text data per rater.\n        light_mode (bool): Indicates whether the application is in light mode (True by default).\n        mode (NoneType): Placeholder for future functionality to handle different modes.\n        frames (dict): A dictionary to store references to different frames of the application.\n\n    Methods:\n        show_frame(frame_name): Raises the specified frame to the top of the window.\n        load_icons(): Loads icons used in the application interface.\n        init_root_frame(frame): Initializes the specified frame as a root frame.\n        init_frames(): Initializes all frames used in the application.\n    """\n\n    def __init__(self):\n        """Initializes the App class, setting up the main application window and loading resources."""\n        super().__init__()\n        self.load_icons()\n\n        self.filevalidation = None\n        self.dbinteraction = DBInteraction(os.path.join(file_path, "data/internal_db.csv"))\n        self.scale_format = ""      # Skalenformate sind nominal, ordinal, intervall und ratio.\n        self.weights = ""\n        \n        self.categories = []\n        self.rater_ids = []\n        self.text = []\n        self.formatted_text = []\n        self.labels = {} # Label pro Text und Rater\n\n        self.title("IIRA")\n        self.geometry("1500x750")\n        self.minsize(1450, 750)\n\n        self.rowconfigure(0, weight=1)\n        self.columnconfigure(0, weight=1)\n        self.light_mode = True\n        self.mode = None\n\n        self.tk.call("source", os.path.join(file_path, "data/themes/forest-light.tcl"))\n        self.style = ttk.Style()\n\n        self.style.theme_use("forest-light")\n\n        self.frames = {} \n        self.init_frames()\n        self.show_frame("MainFrame")\n    \n    def show_frame(self, frame_name):\n        """Raises the specified frame to the top of the window.\n\n        Args:\n            frame_name (str): The name of the frame to be raised.\n        """\n        frame = self.frames[frame_name]\n        frame.tkraise()\n    \n    def load_icons(self):\n        """Loads icons used in the application interface."""\n        # Icons are loaded here\n    \n    def init_root_frame(self, frame):\n        """Initializes the specified frame as a root frame.\n\n        Args:\n            frame (tk.Frame): The frame to be initialized.\n        """\n        frame.grid(row=0, column=0, sticky="nsew")\n    \n    def init_frames(self):\n        """Initializes all frames used in the application."""\n        # Frame initialization logic here\n\n\nif __name__ == "__main__":\n    app = App()\n    app.mainloop()\n```']
