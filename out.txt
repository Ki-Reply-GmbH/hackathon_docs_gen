Python files found: 
['C:\\Users\\t.kubera\\dev\\hackathon\\targets\\IIRA\\app.py', 'C:\\Users\\t.kubera\\dev\\hackathon\\targets\\IIRA\\__init__.py', 'C:\\Users\\t.kubera\\dev\\hackathon\\targets\\IIRA\\core\\create_analyses.py', 'C:\\Users\\t.kubera\\dev\\hackathon\\targets\\IIRA\\core\\fileinteraction.py', 'C:\\Users\\t.kubera\\dev\\hackathon\\targets\\IIRA\\core\\metrics.py', 'C:\\Users\\t.kubera\\dev\\hackathon\\targets\\IIRA\\core\\__init__.py', 'C:\\Users\\t.kubera\\dev\\hackathon\\targets\\IIRA\\data\\__init__.py', 'C:\\Users\\t.kubera\\dev\\hackathon\\targets\\IIRA\\gui\\analyseframe.py', 'C:\\Users\\t.kubera\\dev\\hackathon\\targets\\IIRA\\gui\\containerframe.py', 'C:\\Users\\t.kubera\\dev\\hackathon\\targets\\IIRA\\gui\\fileframes.py', 'C:\\Users\\t.kubera\\dev\\hackathon\\targets\\IIRA\\gui\\helperframes.py', 'C:\\Users\\t.kubera\\dev\\hackathon\\targets\\IIRA\\gui\\mainframe.py', 'C:\\Users\\t.kubera\\dev\\hackathon\\targets\\IIRA\\gui\\rateframe.py', 'C:\\Users\\t.kubera\\dev\\hackathon\\targets\\IIRA\\gui\\__init__.py']
Extracting methods ...
Extracted methods: 
['__init__', 'show_frame', 'load_icons', 'init_root_frame', 'init_frames']
Documenting methods and functions ...
{'C:\\Users\\t.kubera\\dev\\hackathon\\targets\\IIRA\\app.py': {'__init__': '"""\nInitializes the main application window for the IIRA system.\n\nThis method sets up the main window with a title, geometry, and minimum size. It configures the grid layout, initializes the database interaction, loads icons, and sets up various frames within the application. It also sets the theme for the application and displays the main frame.\n"""', 'show_frame': '"""\nRaises the specified frame to the top of the stack in the application window.\nThis method takes the name of the frame to be raised as a parameter and brings that frame to the foreground of the application window, making it the currently visible frame.\n\nParameters:\n    - frame_name (str): The name of the frame to be raised to the top.\n"""', 'load_icons': '```python\ndef load_icons(self):\n    """\n    Loads and initializes application icons from the filesystem into memory.\n\n    This method sets up various icons used throughout the application by loading\n    them from the specified paths and converting them into a format suitable for\n    use in the Tkinter GUI. Each icon is stored as an attribute of the App class.\n    """\n```', 'init_root_frame': '"""\nInitializes and places a frame in the root window\'s grid.\nThis method sets the given frame to occupy the entire available space in the root window\'s grid system. It is used to prepare frames for display.\n\nParameters:\n    - frame (tk.Frame): The frame to be initialized and placed in the grid.\n"""', 'init_frames': '"""\nInitializes and prepares all frames within the application. This method\ndestroys any existing widgets in each frame before re-initializing them\nand placing them in the root window\'s grid. It ensures that the \napplication\'s frames are up-to-date and ready for display.\n"""'}, 'C:\\Users\\t.kubera\\dev\\hackathon\\targets\\IIRA\\__init__.py': {'It seems like there was an error and the source code you intended to provide is missing from your message. Could you please provide the source code so I can extract the method or function names for you?': 'It seems like there was an error and the source code you intended to provide is missing from your message. Could you please provide the source code so I can extract the method or function names for you?'}, 'C:\\Users\\t.kubera\\dev\\hackathon\\targets\\IIRA\\core\\create_analyses.py': {'__init__': '```python\ndef __init__(self, intra_id_list, inter_id_list, intra_metrics, inter_metrics, scale_format, categories, weights, data):\n    """\n    Initialize the CreateAnalyses class with necessary data for performing intra and inter analyses.\n\n    Args:\n    intra_id_list (list): List of IDs for intra analysis.\n    inter_id_list (list): List of IDs for inter analysis.\n    intra_metrics (object): Metrics object for intra analysis.\n    inter_metrics (object): Metrics object for inter analysis.\n    scale_format (str): The format of the scale used in the analyses.\n    categories (list): List of categories used in the analyses.\n    weights (dict): Dictionary of weights for each category.\n    data (dict): Data used for the analyses, formatted according to the labels format in the FileValidation class.\n\n    The constructor also initializes an empty results dictionary to store the results of the analyses.\n    """\n```', 'create_intra_analyses': '```python\ndef create_intra_analyses(self):\n    """\n    Conducts intra-analyses for each ID in the intra_id_list using the provided data.\n\n    This method iterates over each ID in the intra_id_list, retrieves the corresponding\n    ratings, and performs an analysis using the Metrics class. The results of the analysis\n    for each ID are stored in the \'intra\' key of the results dictionary.\n\n    The method utilizes the find_intra_ratings method to filter and format the ratings data\n    before passing it to the Metrics class for analysis. Debug statements are printed\n    throughout the process if debugging is enabled.\n    """\n```', 'create_inter_analyses': '```python\ndef create_inter_analyses(self):\n    """\n    Analyze and compute the inter-rater metrics based on the ratings provided by different raters.\n\n    This method aggregates the ratings from multiple raters, computes the metrics using the\n    Metrics class, and stores the results in the \'inter\' key of the results dictionary.\n    Debug statements are printed to trace the ratings and the computed results if debugging is enabled.\n    """\n```', 'find_intra_ratings': '```python\ndef find_intra_ratings(self, id):\n    """\n    Extracts and aggregates intra-rater ratings for a given ID from the data.\n\n    This method filters and organizes the ratings data for a specific ID to facilitate intra-rater reliability analysis.\n    It constructs a dictionary where each key is a subject (from the TEXT field) and the value is a list of ratings\n    (from the LABEL field) provided by the same rater across different instances. Only subjects rated more than once\n    by the same rater are included in the final output.\n\n    Parameters:\n    - id (int or str): The identifier for the rater whose intra-ratings are to be analyzed.\n\n    Returns:\n    - pandas.DataFrame: A DataFrame where the index corresponds to subjects and the column contains lists of ratings\n      for those subjects that have been rated more than once by the rater identified by `id`.\n    """\n```', 'find_inter_ratings': '```python\ndef find_inter_ratings(self):\n    """\n    Collects and aggregates inter-rater ratings from multiple raters for further analysis.\n\n    This method iterates over the list of inter-rater IDs and compiles the ratings for each subject.\n    It ensures that each subject\'s ratings are collected from different raters, avoiding duplicates\n    that are only relevant for intra-rater analysis. The method constructs a dictionary where each\n    key is a subject and the value is a list of ratings from different raters. The dictionary is\n    then converted to a pandas DataFrame.\n\n    Returns:\n        pandas.DataFrame: A DataFrame where the index represents the subjects and each entry contains\n                          a list of ratings from different raters.\n    """\n```', '': '```python\ndef find_inter_ratings(self):\n    """\n    Collects and organizes inter-rater ratings from the data.\n\n    This method aggregates the ratings given by different raters to the same items across\n    multiple raters specified in `self.inter_id_list`. It constructs a DataFrame where each\n    row corresponds to an item and each column to the ratings it received from different raters.\n\n    Returns:\n        pd.DataFrame: A DataFrame indexed by item names with each column representing the ratings\n                      given by different raters.\n    """\n```'}}

<class 'str'>
"""
Raises the specified frame to the top of the stack in the application window.
This method takes the name of the frame to be raised as a parameter and brings that frame to the foreground of the application window, making it the currently visible frame.

Parameters:
    - frame_name (str): The name of the frame to be raised to the top.
"""
