{
    "C:\\Users\\t.kubera\\dev\\hackathon\\targets\\IIRA\\app.py": {
        "__init__": '"""\nInitializes the main application window for the IIRA system.\n\nThis method sets up the main window with a title, geometry, and minimum size. It configures the grid layout, initializes the database interaction, loads icons, and sets the theme for the application. It also initializes all frames used in the application and displays the main frame.\n"""',
        "show_frame": '"""\nRaises the specified frame to the top of the stack in the application window.\nThis method takes the name of the frame to be raised as a parameter and brings that frame to the foreground of the application window, making it the currently visible frame.\n\nParameters:\n    - frame_name (str): The name of the frame to be raised to the top.\n"""',
        "load_icons": '"""\nLoads and initializes application icons from specified file paths.\n\nThis method sets up various icons used throughout the application by loading them from their respective files located in the \'data/icons\' directory. Each icon is loaded as an ImageTk.PhotoImage object and assigned to an attribute of the App class for easy access and use within the application\'s GUI components.\n"""',
        "init_root_frame": '"""\nInitializes and places a frame in the root window\'s grid.\nThis method sets the given frame to occupy the entire available space in the root window\'s grid system. It is used to prepare frames for display.\n\nParameters:\n    - frame (tk.Frame): The frame to be initialized and placed in the grid.\n"""',
        "init_frames": '"""\nInitializes and prepares all frames within the application. This method\ndestroys any existing widgets in each frame before re-initializing them\nand placing them in the root window\'s grid. It ensures that the \napplication\'s frames are up-to-date and ready for display.\n"""',
    },
    "C:\\Users\\t.kubera\\dev\\hackathon\\targets\\IIRA\\core\\create_analyses.py": {
        "__init__": '"""\nInitialize a new instance of CreateAnalyses class with specified parameters for data analysis.\n\nParameters:\n    intra_id_list (list): List of IDs for intra-analysis.\n    inter_id_list (list): List of IDs for inter-analysis.\n    intra_metrics (object): Metrics object for intra-analysis.\n    inter_metrics (object): Metrics object for inter-analysis.\n    scale_format (str): Format of the scale used in the analysis.\n    categories (list): List of categories involved in the analysis.\n    weights (dict): Dictionary of weights assigned to each category.\n    data (dict): Data to be analyzed, formatted according to the labels format in the FileValidation class.\n\nThe constructor initializes the analysis environment, sets up the data structures, and triggers the intra and inter analyses if applicable.\n"""',
        "create_intra_analyses": '"""\nConducts intra-analyses for each ID in the intra_id_list using the provided data and metrics.\n\nThis method iterates over each ID in the intra_id_list, retrieves the corresponding intra-rater ratings,\nand computes the analysis using the Metrics class. The results are stored in the \'results\' dictionary under\nthe \'intra\' key, indexed by the ID. Debug prints provide insights into the ratings and analysis results for each ID.\n"""',
        "create_inter_analyses": '"""\nConducts inter-rater analyses by aggregating ratings from multiple raters and computing the metrics.\n\nThis method gathers all inter-rater ratings, logs them if debugging is enabled, and then uses these ratings to compute the analysis results based on the specified scale format, categories, and weights. The results are stored in the \'inter\' key of the \'results\' dictionary attribute of the class.\n"""',
        "find_intra_ratings": '"""\nFinds and aggregates intra-rater ratings for a given ID from the dataset.\n\nThis method processes the data for a specific ID to collect and organize the ratings\ngiven by the same rater across different instances. It filters out entries with invalid\nor missing labels and ensures that only subjects rated more than once by the same rater\nare included in the final DataFrame.\n\nParameters:\n    id (int): The unique identifier for the rater whose intra-ratings are to be analyzed.\n\nReturns:\n    pd.DataFrame: A DataFrame where the index represents the subjects and the columns\n                  contain the ratings given by the rater for each subject. Only subjects\n                  with multiple ratings are included.\n"""',
        "find_inter_ratings": '"""\nFinds and aggregates inter-rater ratings from the provided data.\n\nThis method processes the data for multiple raters specified in `self.inter_id_list` and aggregates their ratings for each subject. It constructs a DataFrame where each row corresponds to a subject and each column contains the ratings given by different raters. The method ensures that only subjects rated by more than one rater are included, which are relevant for inter-rater analysis.\n\nReturns:\n    pandas.DataFrame: A DataFrame indexed by subjects with each column representing the ratings from different raters.\n"""',
    },
}
