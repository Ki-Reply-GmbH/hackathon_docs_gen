
@startuml
' This UML class diagram represents the structure of a software project.
' It includes classes, their attributes, methods, and relationships.
' The diagram is generated based on the provided nested dictionary.

' Define the App class
class App {
    +filevalidation: None
    +dbinteraction: DBInteraction
    +scale_format: str
    +weights: str
    +categories: list
    +rater_ids: list
    +text: list
    +formatted_text: list
    +labels: dict
    +light_mode: bool
    +mode: None
    +frames: dict
    +style: ttk.Style
    +__init__()
    +show_frame(frame_name: str)
    +load_icons()
    +init_root_frame(frame: tk.Frame)
    +init_frames()
}

' Define the CreateAnalyses class
class CreateAnalyses {
    +debug: bool
    +intra_id_list: list
    +inter_id_list: list
    +intra_metrics: list
    +inter_metrics: list
    +scale_format: str
    +categories: list
    +weights: list
    +data: dict
    +results: dict
    +__init__(intra_id_list: list, inter_id_list: list, intra_metrics: list, inter_metrics: list, scale_format: str, categories: list, weights: list, data: dict)
    +create_intra_analyses()
    +create_inter_analyses()
    +find_intra_ratings(id: str): pd.DataFrame
    +find_inter_ratings(): pd.DataFrame
}

' Define the FileValidation class
class FileValidation {
    +file: str
    +scale_format: str
    +content: pd.DataFrame
    +format: str
    +categories: list
    +rater_ids: list
    +text: list
    +formatted_text: list
    +labels: dict
    +__init__(file: str, scale_format: str)
    +check_format()
    +find_categories()
    +find_rater_ids()
    +find_text()
    +find_labels()
    +write_file(path: str, ratings: list)
    +usr_to_id(user: str): str
    +nlp(text: str): str
}

' Define the DBInteraction class
class DBInteraction {
    +active_profile: str
    +profiles: list
    +db_file: str
    +load_profiles()
    +create_profile(new_profile: str)
    +delete_profile()
    +change_profile(change_to: str)
    +write_to_db()
}

' Define the Metrics class
class Metrics {
    +debug: bool
    +scale_format: str
    +categories: list
    +ratings: pd.DataFrame
    +quantity_subjects: int
    +replications: int
    +weights: list
    +analysis: object
    +__init__(scale_format: str, categories: list, ratings: pd.DataFrame, weights: list)
    +cohens_kappa(): float
    +fleiss_kappa(): float
    +gwets_ac(): float
    +krippendorfs_alpha(): float
    +g_index(): float
    +icc(): DataFrame
    +overall_agreement(): decimal.Decimal
}

' Define the AnalyseFrame class
class AnalyseFrame {
    +metrics: list
    +intra_kappa: tk.IntVar
    +intra_fleiss_kappa: tk.IntVar
    +intra_alpha_coefficient: tk.IntVar
    +intra_ac: tk.IntVar
    +intra_icc: tk.IntVar
    +intra_metrics: dict
    +inter_kappa: tk.IntVar
    +inter_fleiss_kappa: tk.IntVar
    +inter_alpha_coefficient: tk.IntVar
    +inter_ac: tk.IntVar
    +inter_icc: tk.IntVar
    +inter_metrics: dict
    +intra_ids: dict
    +inter_ids: dict
    +rater_container: ScrollFrame
    +toggle_ids: ttk.Button
    +metrics_container: ttk.Frame
    +toggle_metrics: ttk.Button
    +__init__(container: tk.Tk or tk.Frame)
    +analyse_start(container: tk.Tk)
    +populate_rater_container()
    +populate_metrics_container()
    +map_metric_to_var(mode: str, metric_name: str): tk.IntVar
    +toggle(mode: str)
    +help_cmd(event: tkinter.Event)
    +update_frame()
}

' Define the ResultsFrame class
class ResultsFrame {
    +reliability_analyses: dict
    +selected_intra_ids: list
    +selected_inter_ids: list
    +selected_intra_metrics: list
    +selected_inter_metrics: list
    +container.scale_format: str
    +container.categories: list
    +container.weights: list
    +container.filevalidation.labels: list
    +export_cmd()
    +help_cmd(event: tkinter.Event)
    +update_frame()
    +calculate_results()
    +populate_intra_results()
    +populate_inter_results()
}

' Define the ContainerFrame class
class ContainerFrame {
    +container: tk.Tk or tk.Frame
    +__init__(container: tk.Tk or tk.Frame)
    +init_menu_bar()
    +on_enter(frame: ttk.Frame, label: ttk.Label)
    +on_leave(frame: ttk.Frame, label: ttk.Label)
    +toggle_color_mode()
    +create_table(parent: tk.Widget, headings: list, content: list)
    +profile_cmd()
    +home_cmd()
    +help_cmd(event: tkinter.Event)
    +update_frame()
}

' Define the ScaleFrame class
class ScaleFrame {
    +center_container: tkinter.Frame
    +scale_types: list
    +selected_scale: str
    +container: object
    +__init__(container: tk.Tk or tk.Frame)
    +populate_frame(mode: str)
    +populate_weights()
    +populate_scaletype()
    +next_cmd()
    +help_cmd(event: tkinter.Event)
    +update_frame()
}

' Define the FileFrame class
class FileFrame {
    +__init__(container: tk.Tk or tk.Frame)
    +select_file(container: tk.Tk)
    +help_cmd(event: tkinter.Event)
    +update_frame()
}

' Define the ProfileFrame class
class ProfileFrame {
    +profile_name_label: tk.Label
    +change_profile_mbutton: tk.Menubutton
    +dbinteraction: DBInteraction
    +__init__(container: tk.Tk or tk.Frame)
    +create_new_profile()
    +change_profile(profile_selection: str)
    +delete_profile()
    +ok_cmd(event: tkinter.Event)
    +populate_profile_label()
    +populate_change_profile_menu()
}

' Define the ScrollFrame class
class ScrollFrame {
    +__init__(container: tk.Tk or tk.Frame)
    +onFrameConfigure(event: tkinter.Event)
    +onCanvasConfigure(event: tk.Event)
    +onMouseWheel(event: tkinter.Event)
    +onEnter(event: tk.Event)
    +onLeave(event: tk.Event)
}

' Define the MainHelpFrame class
class MainHelpFrame {
    +container: tk.Tk or tk.Toplevel
    +notebook: ttk.Notebook
    +tab_general: ttk.Frame
    +tab_analyse: ttk.Frame
    +tab_rate: ttk.Frame
    +general_txt: tk.Text
    +analyse_txt: tk.Text
    +rate_txt: tk.Text
    +__init__(container: tk.Tk or tk.Toplevel)
}

' Define the ScaleHelpFrame class
class ScaleHelpFrame {
    +container: tk.Tk
    +notebook: ttk.Notebook
    +tab_scale: ttk.Frame
    +tab_weights: ttk.Frame
    +scale_txt: tk.Text
    +weights_txt: tk.Text
    +__init__(container: tk.Tk or tk.Toplevel)
}

' Define the ImportHelpFrame class
class ImportHelpFrame {
    +container: tk.Tk or tk.Toplevel
    +__init__(container: tk.Tk or tk.Toplevel)
}

' Define the PrepAnalyseHelpFrame class
class PrepAnalyseHelpFrame {
    +container: tk.Tk
    +notebook: ttk.Notebook
    +tab_rater: ttk.Frame
    +tab_metrics: ttk.Frame
    +rater_txt: tk.Text
    +metrics_txt: tk.Text
    +__init__(container: tk.Tk)
}

' Define the ResultsHelpFrame class
class ResultsHelpFrame {
    +container: tk.Tk or tk.Toplevel
    +__init__(container: tk.Tk or tk.Toplevel)
}

' Define the RateHelpFrame class
class RateHelpFrame {
    +container: tk.Tk
    +notebook: ttk.Notebook
    +tab_general: ttk.Frame
    +general_txt: tk.Text
    +__init__(container: tk.Tk)
}

' Define the MainFrame class
class MainFrame {
    +container: tk.Tk or tk.Frame
    +__init__(container: tk.Tk or tk.Frame)
    +start_mode(mode: str)
    +no_profile()
    +help_cmd(event: tkinter.Event)
}

' Define the RateFrame class
class RateFrame {
    +container: tk.Tk
    +text: list
    +ratings: list
    +text_index: int
    +categories_var: tk.StringVar
    +rbtn_container: tk.Frame
    +text_label: tk.Label
    +percentage_label: tk.Label
    +__init__(container: tk.Tk)
    +populate_navigation()
    +randomize(mode: str)
    +doubleclick_treeview(event: tkinter.Event)
    +delete_questions()
    +populate_categories()
    +delete_categories()
    +populate_text()
    +add_newlines(text: str, n: int): str
    +count_upper_case(text: str, n: int): int
    +entry_input_cmd(event: tkinter.Event)
    +cat_hotkey_cmd(event: tkinter.Event)
    +next_cmd(event: tkinter.Event)
    +prev_cmd(event: tkinter.Event)
    +save_cmd()
    +delete_cmd()
    +label_text(event: tkinter.Event)
    +labeling_finished()
    +populate_percentage()
    +home_cmd()
    +help_cmd(event: tkinter.Event)
    +update_frame(mode: str)
}

' Define relationships
App --> DBInteraction
App --> FileValidation
App --> ScaleFrame
App --> FileFrame
App --> RateFrame
App --> ResultsFrame
App --> AnalyseFrame
App --> MainFrame
App --> ProfileFrame
App --> ScrollFrame
App --> MainHelpFrame
App --> ScaleHelpFrame
App --> ImportHelpFrame
App --> PrepAnalyseHelpFrame
App --> ResultsHelpFrame
App --> RateHelpFrame

CreateAnalyses --> Metrics
CreateAnalyses --> FileValidation

FileValidation --> DBInteraction

DBInteraction --> FileValidation

AnalyseFrame --> ScrollFrame

ResultsFrame --> CreateAnalyses

ContainerFrame --> ProfileFrame

ScaleFrame --> FileFrame

FileFrame --> FileValidation

ProfileFrame --> DBInteraction

ScrollFrame --> ContainerFrame

MainHelpFrame --> ContainerFrame

ScaleHelpFrame --> ContainerFrame

ImportHelpFrame --> ContainerFrame

PrepAnalyseHelpFrame --> ContainerFrame

ResultsHelpFrame --> ContainerFrame

RateHelpFrame --> ContainerFrame

MainFrame --> ContainerFrame

RateFrame --> ContainerFrame

@enduml
```

' This PlantUML code defines a comprehensive UML class diagram for the software project.
' The diagram includes classes, their attributes, methods, and relationships.
' The relationships are represented using appropriate PlantUML syntax for inheritance, associations, and dependencies.
' The diagram should be rendered directly from this PlantUML code without any further preprocessing.
