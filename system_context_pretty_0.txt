[['C:\\Users\\t.kubera\\dev\\hackathon\\hackathon_code_gen\\resources\\IIRA\\app.py',
  '### Summary:\n'
  '\n'
  '1. **External Systems**:\n'
  '   - **Database**: The file interacts with a database through the '
  '`DBInteraction` class, which is initialized with a path to a CSV file '
  '(`data/internal_db.csv`).\n'
  '   - **Image Processing Library**: The file uses the `PIL` (Python Imaging '
  'Library) for handling image files, specifically `ImageTk` for loading '
  'icons.\n'
  '\n'
  '2. **User Roles**:\n'
  '   - **Not Applicable**: The file does not explicitly define any user roles '
  'or actors. It primarily sets up the graphical user interface (GUI) for the '
  'application.\n'
  '\n'
  '3. **Data Flows**:\n'
  '   - **Incoming Data**: Data is read from the CSV file '
  '(`data/internal_db.csv`) through the `DBInteraction` class.\n'
  '   - **Outgoing Data**: There is no explicit mention of data being sent out '
  'from this file. However, the GUI elements suggest that user interactions '
  '(e.g., file selection, rating, analysis) might result in data being '
  'processed and potentially stored or displayed.\n'
  '\n'
  '4. **Entry Points**:\n'
  "   - **App Initialization**: The `App` class's `__init__` method serves as "
  'an entry point for setting up the application, including loading icons, '
  'initializing frames, and configuring the main window.\n'
  '   - **Main Loop**: The `if __name__ == "__main__":` block at the end of '
  'the file starts the application by creating an instance of the `App` class '
  'and calling its `mainloop` method.\n'
  '   - **Frame Management**: The `show_frame` method is an entry point for '
  'displaying different frames within the application, which are initialized '
  'in the `init_frames` method.\n'
  '\n'
  'This summary provides a high-level overview of the key elements relevant to '
  'creating a system context diagram for the given file.'],
 ['C:\\Users\\t.kubera\\dev\\hackathon\\hackathon_code_gen\\resources\\IIRA\\core\\create_analyses.py',
  '### Summary:\n'
  '\n'
  '1. **External Systems**:\n'
  '   - **Pandas**: The code interacts with the Pandas library for data '
  'manipulation and analysis.\n'
  '   - **Numpy**: The code imports Numpy, although it is not explicitly used '
  'in the provided content.\n'
  '   - **Core Metrics**: The code imports a `Metrics` class from a module '
  'named `core.metrics`, which is used for performing calculations and '
  'analyses.\n'
  '\n'
  '2. **User Roles**: \n'
  '   - Not Applicable: The provided file does not define or reference any '
  'specific user roles or actors that interact with the system.\n'
  '\n'
  '3. **Data Flows**:\n'
  '   - **Input Data**: The class `CreateAnalyses` takes several parameters in '
  'its constructor, including `intra_id_list`, `inter_id_list`, '
  '`intra_metrics`, `inter_metrics`, `scale_format`, `categories`, `weights`, '
  'and `data`. These parameters represent the input data required for '
  'analysis.\n'
  '   - **Output Data**: The results of the analyses are stored in the '
  '`self.results` dictionary, which contains the results of intra and inter '
  'analyses.\n'
  '   - **Intermediate Data**: The methods `find_intra_ratings` and '
  '`find_inter_ratings` process the input data to generate ratings, which are '
  'then used in the analysis.\n'
  '\n'
  '4. **Entry Points**:\n'
  '   - **Constructor (`__init__`)**: The constructor of the `CreateAnalyses` '
  'class initializes the object and triggers the creation of intra and inter '
  'analyses if the respective ID lists and metrics are provided.\n'
  '   - **`create_intra_analyses` Method**: This method is called within the '
  'constructor if `intra_id_list` and `intra_metrics` are provided. It '
  'performs intra-rater analysis.\n'
  '   - **`create_inter_analyses` Method**: This method is called within the '
  'constructor if `inter_id_list` and `inter_metrics` are provided. It '
  'performs inter-rater analysis.\n'
  '   - **`find_intra_ratings` Method**: This method is used within '
  '`create_intra_analyses` to find and process intra-ratings.\n'
  '   - **`find_inter_ratings` Method**: This method is used within '
  '`create_inter_analyses` to find and process inter-ratings.\n'
  '\n'
  'The provided file primarily focuses on performing intra and inter-rater '
  'analyses using the input data and metrics, with interactions involving '
  'external libraries like Pandas and a custom `Metrics` class.'],
 ['C:\\Users\\t.kubera\\dev\\hackathon\\hackathon_code_gen\\resources\\IIRA\\core\\fileinteraction.py',
  '### Summary:\n'
  '\n'
  '1. **External Systems**:\n'
  '   - **Pandas**: The file interacts with the Pandas library for reading and '
  'manipulating data from various file formats (Excel, CSV, ODS).\n'
  '   - **Numpy**: Used for numerical operations and handling missing data.\n'
  '   - **XlsxWriter**: Utilized for writing data to Excel files.\n'
  '   - **Pathlib**: Used for handling file paths and extensions.\n'
  '   - **Datetime**: Used for handling date and time operations.\n'
  '   - **Re**: Regular expressions are used for text processing.\n'
  '   - **Core.metrics**: The `map_metrics` function is imported from this '
  'module, indicating interaction with internal metrics mapping '
  'functionality.\n'
  '\n'
  '2. **User Roles**:\n'
  '   - **Rater**: The code references "Rater ID" and "Rater" multiple times, '
  'indicating that users in the role of raters interact with the system by '
  'providing ratings and other data.\n'
  '\n'
  '3. **Data Flows**:\n'
  '   - **Input Data**: The system reads data from various file formats '
  '(Excel, CSV, ODS) using Pandas.\n'
  '   - **Output Data**: The system writes data to Excel and CSV files using '
  'Pandas and XlsxWriter.\n'
  '   - **Internal Data Processing**: The system processes data to find '
  'categories, rater IDs, text, and labels, and performs various analyses '
  '(intra-rater and inter-rater).\n'
  '\n'
  '4. **Entry Points**:\n'
  '   - **FileValidation Class**:\n'
  '     - `__init__`: Initializes the class and processes the input file.\n'
  '     - `check_format`: Determines the format of the input file.\n'
  '     - `find_categories`: Extracts categories from the input data.\n'
  '     - `find_rater_ids`: Extracts rater IDs from the input data.\n'
  '     - `find_text`: Extracts text from the input data.\n'
  '     - `find_labels`: Extracts labels from the input data.\n'
  '     - `write_file`: Writes processed data to an output file.\n'
  '   - **DBInteraction Class**:\n'
  '     - `__init__`: Initializes the class and loads the database.\n'
  '     - `load_profiles`: Loads profiles from the database.\n'
  '     - `create_profile`: Creates a new profile.\n'
  '     - `delete_profile`: Deletes the current profile.\n'
  '     - `change_profile`: Changes the active profile.\n'
  '     - `write_to_db`: Writes profiles to the database.\n'
  '   - **write_excel Function**: Writes analysis results to an Excel file.\n'
  '\n'
  '---\n'
  '\n'
  'This summary provides a clear overview of the key elements required for '
  'creating a system context diagram based on the provided file content.'],
 ['C:\\Users\\t.kubera\\dev\\hackathon\\hackathon_code_gen\\resources\\IIRA\\core\\metrics.py',
  '### Summary:\n'
  '\n'
  '1. **External Systems**:\n'
  '   - **irrCAC**: The file imports the `irrCAC` library, specifically the '
  '`CAC` class from `irrCAC.raw`, which is used for inter-rater reliability '
  'analysis.\n'
  '   - **pingouin**: The file imports the `pingouin` library, which is used '
  'for statistical analysis, specifically the `intraclass_corr` function.\n'
  '   - **pandas**: The file imports the `pandas` library, which is used for '
  'data manipulation and analysis.\n'
  '   - **numpy**: The file imports the `numpy` library, which is used for '
  'numerical operations.\n'
  '   - **decimal**: The file imports the `decimal` library, which is used for '
  'precise decimal arithmetic.\n'
  '\n'
  '2. **User Roles**: \n'
  '   - Not Applicable. The file does not define specific user roles or actors '
  'that interact with the system.\n'
  '\n'
  '3. **Data Flows**: \n'
  '   - **Input Data**: The `Metrics` class takes in `scale_format`, '
  '`categories`, `ratings`, and `weights` as input parameters. These inputs '
  'are used to perform various statistical analyses.\n'
  '   - **Output Data**: The methods `cohens_kappa`, `fleiss_kappa`, '
  '`gwets_ac`, `krippendorfs_alpha`, and `g_index` return calculated '
  'statistical values based on the input data.\n'
  '   - **Data Transformation**: The `icc` method transforms the input ratings '
  "into a format suitable for the `pingouin` library's `intraclass_corr` "
  'function and returns the calculated intraclass correlation coefficient.\n'
  '\n'
  '4. **Entry Points**: \n'
  '   - **`__init__` method**: Initializes the `Metrics` class and sets up the '
  'analysis based on the provided `scale_format`.\n'
  "   - **`cohens_kappa` method**: Returns the Cohen's Kappa coefficient.\n"
  "   - **`fleiss_kappa` method**: Returns the Fleiss' Kappa coefficient.\n"
  "   - **`gwets_ac` method**: Returns Gwet's AC coefficient.\n"
  "   - **`krippendorfs_alpha` method**: Returns Krippendorff's Alpha "
  'coefficient.\n'
  '   - **`g_index` method**: Calculates and returns the G-index.\n'
  '   - **`icc` method**: Calculates and returns the intraclass correlation '
  'coefficient.\n'
  '   - **`overall_agreement` method**: Helper function to calculate overall '
  'agreement.\n'
  '\n'
  'This summary provides a clear understanding of the key elements required '
  'for creating a system context diagram based on the provided file content.'],
 ['C:\\Users\\t.kubera\\dev\\hackathon\\hackathon_code_gen\\resources\\IIRA\\core\\__init__.py',
  "Sure, I'd be happy to help you analyze the file. Please provide the content "
  'of the file you are referring to, and I will extract the necessary '
  'information to create the summary based on the criteria you provided.'],
 ['C:\\Users\\t.kubera\\dev\\hackathon\\hackathon_code_gen\\resources\\IIRA\\data\\__init__.py',
  "Sure, I'd be happy to help you analyze the file. Please provide the content "
  'of the file you are referring to, and I will extract the necessary '
  'information to create the summary based on the criteria you provided.'],
 ['C:\\Users\\t.kubera\\dev\\hackathon\\hackathon_code_gen\\resources\\IIRA\\gui\\analyseframe.py',
  '### Summary:\n'
  '\n'
  '1. **External Systems**: \n'
  '   - **File Interaction**: The code interacts with the file system to '
  'export results to various file formats (Excel, LibreOffice Calc, CSV) using '
  'the `write_excel` function from the `core.fileinteraction` module.\n'
  '   - **Core Analysis**: The code uses the `CreateAnalyses` class from the '
  '`core.create_analyses` module to perform reliability analyses.\n'
  '   - **Metrics Mapping**: The code uses the `map_metrics` function from the '
  '`core.metrics` module to map metric names to their corresponding '
  'functions.\n'
  '\n'
  '2. **User Roles**: \n'
  '   - **User**: The primary user role is the end-user who interacts with the '
  'GUI to select raters and metrics, start the analysis, and export the '
  'results.\n'
  '\n'
  '3. **Data Flows**: \n'
  '   - **Input Data**: User selections for raters and metrics are collected '
  'through the GUI.\n'
  '   - **Output Data**: Analysis results are displayed in the GUI and can be '
  'exported to files.\n'
  '   - **Internal Data Flow**: Selected raters and metrics are passed to the '
  '`CreateAnalyses` class to perform the analysis. The results are then used '
  'to populate the GUI and can be exported.\n'
  '\n'
  '4. **Entry Points**: \n'
  '   - **GUI Initialization**: The `__init__` method of the `AnalyseFrame` '
  'and `ResultsFrame` classes initializes the GUI components.\n'
  '   - **Start Analysis**: The `analyse_start` method in the `AnalyseFrame` '
  'class is the entry point for starting the analysis based on user '
  'selections.\n'
  '   - **Export Results**: The `export_cmd` method in the `ResultsFrame` '
  'class is the entry point for exporting the analysis results to a file.\n'
  '   - **Update Frame**: The `update_frame` method in both `AnalyseFrame` and '
  '`ResultsFrame` classes is used to refresh the GUI with new data.\n'
  '\n'
  'If you need further details or have additional questions, feel free to '
  'ask!'],
 ['C:\\Users\\t.kubera\\dev\\hackathon\\hackathon_code_gen\\resources\\IIRA\\gui\\containerframe.py',
  '### Summary:\n'
  '\n'
  '1. **External Systems**: \n'
  '   - **Not Applicable**: The provided file does not interact with any '
  'external systems or services such as databases, web services, or '
  'third-party APIs. It primarily deals with GUI elements using the `tkinter` '
  'library.\n'
  '\n'
  '2. **User Roles**: \n'
  '   - **Not Applicable**: The file does not define specific user roles or '
  'actors. It focuses on the GUI components and their interactions within the '
  'application.\n'
  '\n'
  '3. **Data Flows**: \n'
  '   - **Not Applicable**: There are no explicit data flows into or out of '
  'the system in this file. The file is concerned with the layout and behavior '
  'of the GUI elements.\n'
  '\n'
  '4. **Entry Points**: \n'
  '   - **`__init__` method**: Initializes the `ContainerFrame` and sets up '
  'the menu bar.\n'
  '   - **`init_menu_bar` method**: Sets up the menu bar with various frames '
  'and labels.\n'
  '   - **`profile_cmd` method**: Invoked when the profile label is clicked, '
  'initializes the `ProfileFrame`.\n'
  '   - **`home_cmd` method**: Invoked when the home label is clicked, '
  'initializes and shows the main frame.\n'
  '   - **`help_cmd` method**: Placeholder for help command, currently raises '
  '`NotImplementedError`.\n'
  '   - **`on_enter` and `on_leave` methods**: Handle mouse enter and leave '
  'events for frames and labels.\n'
  '   - **`toggle_color_mode` method**: Toggles between light and dark mode '
  'themes.\n'
  '   - **`create_table` method**: Creates a table with given headings and '
  'content.\n'
  '   - **`update_frame` method**: Placeholder for updating the frame, '
  'currently raises `NotImplementedError`.\n'
  '\n'
  'The file is primarily focused on the GUI layout and interactions within the '
  'application, without involving external systems, user roles, or data '
  'flows.'],
 ['C:\\Users\\t.kubera\\dev\\hackathon\\hackathon_code_gen\\resources\\IIRA\\gui\\fileframes.py',
  '### Summary:\n'
  '\n'
  '1. **External Systems**: \n'
  '   - **File System**: The code interacts with the file system to open and '
  'read files using `tk.filedialog.askopenfilename`.\n'
  '   - **Pandas**: The `pandas` library is imported, which suggests that data '
  'manipulation and possibly file reading/writing operations are performed '
  'using this library.\n'
  '   - **FileValidation**: The `FileValidation` class from '
  '`core.fileinteraction` is used, indicating interaction with a custom file '
  'validation system.\n'
  '\n'
  '2. **User Roles**: \n'
  '   - **End User**: The code is designed to be part of a GUI application, '
  'likely used by end users who interact with the system to import and analyze '
  'files.\n'
  '\n'
  '3. **Data Flows**: \n'
  '   - **Input Data Flow**: \n'
  '     - Files are selected and imported by the user through the file dialog '
  '(`tk.filedialog.askopenfilename`).\n'
  '     - The imported file is then validated and processed by the '
  '`FileValidation` class.\n'
  '   - **Output Data Flow**: \n'
  '     - Processed data is displayed in the GUI, such as in tables created '
  'within the `populate_format_preview` method.\n'
  '     - Error messages are shown to the user via `messagebox.showerror` if '
  'file import fails.\n'
  '\n'
  '4. **Entry Points**: \n'
  '   - **`__init__` Methods**: The constructors of `ScaleFrame` and '
  '`FileFrame` classes initialize the GUI components and set up the layout.\n'
  '   - **`next_cmd` Method**: This method is called when the "Weiter" button '
  'is clicked, handling the transition to the next frame.\n'
  '   - **`select_file` Method**: This method is invoked when the "Datei '
  'ausw�hlen" button is clicked, handling file selection and validation.\n'
  "   - **`update_frame` Method**: This method updates the frame's content, "
  'likely called when the frame needs to be refreshed or reloaded.\n'
  '\n'
  'Overall, the file primarily deals with GUI interactions, file selection, '
  'and data validation, with a focus on user-driven actions within a graphical '
  'interface.'],
 ['C:\\Users\\t.kubera\\dev\\hackathon\\hackathon_code_gen\\resources\\IIRA\\gui\\helperframes.py',
  '### Summary:\n'
  '\n'
  '1. **External Systems**: \n'
  '   - **Databases**: The code interacts with a database through the '
  '`self.container.dbinteraction` object. This is evident from methods like '
  '`self.container.dbinteraction.active_profile`, '
  '`self.container.dbinteraction.profiles`, '
  '`self.container.dbinteraction.create_profile`, '
  '`self.container.dbinteraction.change_profile`, and '
  '`self.container.dbinteraction.delete_profile`.\n'
  '   - **Web Services**: The code includes URLs that are likely used for '
  'documentation or external resources, but there is no direct interaction '
  'with these URLs in the provided code snippet.\n'
  '   - **Operating System**: The code interacts with the operating system '
  'through the `os` and `platform` modules, specifically for file path '
  'operations and platform-specific behavior in the `onMouseWheel` method.\n'
  '\n'
  '2. **User Roles**: \n'
  '   - **Profile Management**: Users can create, delete, and switch profiles. '
  'This is facilitated through the `ProfileFrame` class.\n'
  '   - **Help Access**: Users can access help documentation through various '
  '`HelpFrame` classes (e.g., `MainHelpFrame`, `ScaleHelpFrame`, '
  '`ImportHelpFrame`, `PrepAnalyseHelpFrame`, `ResultsHelpFrame`, '
  '`RateHelpFrame`).\n'
  '\n'
  '3. **Data Flows**: \n'
  '   - **Into the System**: User inputs for creating new profiles '
  '(`self.user_input.get()`), changing profiles, and deleting profiles.\n'
  '   - **Out of the System**: Data related to profiles is fetched from the '
  'database and displayed in the UI (e.g., '
  '`self.container.dbinteraction.active_profile`, '
  '`self.container.dbinteraction.profiles`).\n'
  '\n'
  '4. **Entry Points**: \n'
  '   - **ProfileFrame Class**:\n'
  '     - `__init__`: Initializes the profile management UI.\n'
  '     - `ok_cmd`: Handles the creation of a new profile based on user '
  'input.\n'
  '     - `create_new_profile`: Adds an input field for creating a new '
  'profile.\n'
  '     - `change_profile`: Changes the active profile.\n'
  '     - `delete_profile`: Deletes the current profile.\n'
  '   - **ScrollFrame Class**:\n'
  '     - `__init__`: Initializes the scrollable frame.\n'
  '     - `onFrameConfigure`, `onCanvasConfigure`, `onMouseWheel`, `onEnter`, '
  '`onLeave`: Handle scrolling behavior.\n'
  '   - **MainHelpFrame Class**:\n'
  '     - `__init__`: Initializes the main help UI.\n'
  '   - **ScaleHelpFrame Class**:\n'
  '     - `__init__`: Initializes the scale and weights help UI.\n'
  '   - **ImportHelpFrame Class**:\n'
  '     - `__init__`: Initializes the import help UI.\n'
  '   - **PrepAnalyseHelpFrame Class**:\n'
  '     - `__init__`: Initializes the preparation for analysis help UI.\n'
  '   - **ResultsHelpFrame Class**:\n'
  '     - `__init__`: Initializes the results help UI.\n'
  '   - **RateHelpFrame Class**:\n'
  '     - `__init__`: Initializes the rating help UI.\n'
  '\n'
  'The provided file primarily focuses on the user interface for profile '
  'management and help documentation, with interactions with a database and '
  'some platform-specific behavior for scrolling.'],
 ['C:\\Users\\t.kubera\\dev\\hackathon\\hackathon_code_gen\\resources\\IIRA\\gui\\mainframe.py',
  '### Summary:\n'
  '\n'
  '1. **External Systems**:\n'
  '   - **Databases**: The file interacts with a database through the '
  '`dbinteraction` object, specifically when checking for an active profile '
  'and creating a new profile '
  '(`self.container.dbinteraction.create_profile(user_input.get())`).\n'
  '   - **File System**: The file uses `filedialog` from `tkinter` to interact '
  'with the file system, although the specific interactions are not detailed '
  'in this snippet.\n'
  '   - **Pandas Library**: The file imports `pandas as pd`, indicating '
  'potential data manipulation or analysis, although specific interactions are '
  'not shown in this snippet.\n'
  '\n'
  '2. **User Roles**:\n'
  '   - **General User**: The code references user interactions such as '
  'creating a profile and performing analyses, indicating that the primary '
  'user role is a general user who interacts with the GUI to perform tasks '
  'like data analysis and profile management.\n'
  '\n'
  '3. **Data Flows**:\n'
  '   - **Input Data**: Users input data through the GUI, such as entering a '
  'profile name (`user_input.get()`).\n'
  '   - **Database Interaction**: Data flows to the database when creating a '
  'new profile '
  '(`self.container.dbinteraction.create_profile(user_input.get())`).\n'
  '   - **GUI Updates**: Data flows within the system to update the GUI based '
  'on user actions, such as starting different modes '
  '(`self.start_mode("analyse")` and `self.start_mode("rate")`).\n'
  '\n'
  '4. **Entry Points**:\n'
  '   - **`__init__` Method**: Initializes the `MainFrame` and sets up the GUI '
  'components.\n'
  '   - **`start_mode` Method**: Entry point for starting different modes of '
  'operation (`analyse` and `rate`).\n'
  '   - **`no_profile` Method**: Entry point for handling the scenario where '
  'no profile is active, including creating a new profile.\n'
  '   - **`help_cmd` Method**: Entry point for displaying the help frame.\n'
  '\n'
  '### Additional Notes:\n'
  '- The file primarily focuses on setting up the GUI and handling user '
  'interactions within the application.\n'
  '- The actual data processing and interaction with external systems like '
  'databases and file systems are likely handled in other parts of the '
  'codebase, which are referenced but not detailed in this snippet.'],
 ['C:\\Users\\t.kubera\\dev\\hackathon\\hackathon_code_gen\\resources\\IIRA\\gui\\rateframe.py',
  '### Summary:\n'
  '\n'
  '1. **External Systems**:\n'
  '   - **Databases**: The file interacts with a database through '
  '`container.dbinteraction.active_profile`.\n'
  '   - **File Systems**: The file interacts with the file system for saving '
  'files using `tk.filedialog.asksaveasfilename` and writing data through '
  '`self.container.filevalidation.write_file`.\n'
  '   - **GUI Framework**: The file uses the `tkinter` library for GUI '
  'components and interactions.\n'
  '   - **Data Processing Libraries**: The file imports and potentially uses '
  '`pandas` and `numpy` for data manipulation.\n'
  '\n'
  '2. **User Roles**:\n'
  '   - **End User**: The primary user role interacting with this system is '
  'the end user who uses the GUI to rate text elements, save ratings, and '
  'navigate through the application.\n'
  '\n'
  '3. **Data Flows**:\n'
  '   - **Input Data**: User inputs ratings through GUI components like '
  '`ttk.Radiobutton` and `ttk.Entry`.\n'
  '   - **Output Data**: The system saves ratings to a file using the '
  '`save_cmd` method, which involves file dialogs and writing data to the file '
  'system.\n'
  '   - **Internal Data Flow**: Data flows internally between GUI components '
  'and the underlying data structures (`self.text`, `self.ratings`).\n'
  '\n'
  '4. **Entry Points**:\n'
  '   - **GUI Event Handlers**: Methods like `next_cmd`, `prev_cmd`, '
  '`save_cmd`, `delete_cmd`, `label_text`, `entry_input_cmd`, and '
  '`cat_hotkey_cmd` serve as entry points triggered by user actions (e.g., '
  'button clicks, key presses).\n'
  '   - **Initialization**: The `__init__` method initializes the `RateFrame` '
  'and sets up the GUI components and bindings.\n'
  '\n'
  '---\n'
  '\n'
  'This summary captures the key elements from the provided file content, '
  'focusing on external systems, user roles, data flows, and entry points '
  'relevant for creating a system context diagram.'],
 ['C:\\Users\\t.kubera\\dev\\hackathon\\hackathon_code_gen\\resources\\IIRA\\gui\\__init__.py',
  "Sure, I'd be happy to help you analyze the file. Please provide the content "
  'of the file you are referring to, and I will extract the necessary '
  'information to create the summary based on the criteria you provided.']]
