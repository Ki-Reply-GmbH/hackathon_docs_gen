[["C:\\Users\\t.kubera\\dev\\hackathon\\hackathon_code_gen\\resources\\IIRA\\app.py", "### Summary:\n\n1. **Processes**:\n   - **App Initialization**: The `App` class initializes the main application, sets up the GUI, and loads necessary resources.\n   - **Frame Management**: The `init_frames` and `show_frame` methods manage the different frames (e.g., `MainFrame`, `ScaleFrame`, `FileFrame`, `RateFrame`, `ResultsFrame`, `AnalyseFrame`) within the application.\n   - **Icon Loading**: The `load_icons` method loads various icons used in the application.\n   - **Database Interaction**: The `DBInteraction` class is instantiated to handle interactions with the internal database (`data/internal_db.csv`).\n\n2. **External Entities**:\n   - **Not Applicable**: The file does not explicitly mention any external entities such as users, other systems, or external data sources.\n\n3. **Data Flows**:\n   - **Database Interaction**: The `DBInteraction` instance interacts with the internal database file (`data/internal_db.csv`). This represents a data flow between the application and the internal database.\n   - **Frame Display**: The `show_frame` method raises different frames, indicating a flow of control and data between the main application and various GUI components.\n\nThe file primarily focuses on setting up the internal structure and GUI of the application, with no explicit mention of external entities or detailed data flows beyond internal interactions."], ["C:\\Users\\t.kubera\\dev\\hackathon\\hackathon_code_gen\\resources\\IIRA\\__init__.py", "Sure, I can help with that. Please provide the content of the file you are analyzing from the GitHub repository."], ["C:\\Users\\t.kubera\\dev\\hackathon\\hackathon_code_gen\\resources\\IIRA\\core\\create_analyses.py", "### Summary:\n\n1. **Processes**:\n   - **CreateAnalyses Class**: This class is responsible for creating intra and inter analyses based on provided data.\n   - **create_intra_analyses Method**: This method performs intra analysis for each ID in the `intra_id_list`.\n   - **create_inter_analyses Method**: This method performs inter analysis for the IDs in the `inter_id_list`.\n   - **find_intra_ratings Method**: This method retrieves and processes intra ratings for a given ID.\n   - **find_inter_ratings Method**: This method retrieves and processes inter ratings for the IDs in the `inter_id_list`.\n\n2. **External Entities**:\n   - **User**: The user provides the input data such as `intra_id_list`, `inter_id_list`, `intra_metrics`, `inter_metrics`, `scale_format`, `categories`, `weights`, and `data`.\n   - **Metrics Class**: This class is used to perform calculations for both intra and inter analyses.\n\n3. **Data Flows**:\n   - **Input Data Flow**: The user inputs data into the `CreateAnalyses` class, including `intra_id_list`, `inter_id_list`, `intra_metrics`, `inter_metrics`, `scale_format`, `categories`, `weights`, and `data`.\n   - **Intra Analysis Data Flow**: The `create_intra_analyses` method processes the `intra_id_list` and `intra_metrics` to generate intra analysis results, which are stored in `self.results[\"intra\"]`.\n   - **Inter Analysis Data Flow**: The `create_inter_analyses` method processes the `inter_id_list` and `inter_metrics` to generate inter analysis results, which are stored in `self.results[\"inter\"]`.\n   - **Ratings Data Flow**: The `find_intra_ratings` and `find_inter_ratings` methods process the `data` to retrieve ratings, which are then used in the analysis methods.\n   - **Metrics Calculation Data Flow**: The `Metrics` class is used to perform calculations based on the ratings, `scale_format`, `categories`, and `weights`, and the results are stored in `self.results`.\n\nThis summary captures the key elements required for creating a system context diagram based on the provided file content."], ["C:\\Users\\t.kubera\\dev\\hackathon\\hackathon_code_gen\\resources\\IIRA\\core\\fileinteraction.py", "### Summary:\n\n1. **Processes**:\n   - **File Validation**: The `FileValidation` class handles the validation of input files, including checking the format, finding categories, rater IDs, text, and labels.\n   - **Database Interaction**: The `DBInteraction` class manages interactions with a database, including loading profiles, creating profiles, deleting profiles, and changing profiles.\n   - **Writing Excel Files**: The `write_excel` function generates an Excel file with analysis results, including intra-rater and inter-rater analyses.\n\n2. **External Entities**:\n   - **Input Files**: The system interacts with various input files (e.g., `.xlsx`, `.xls`, `.ods`, `.csv`) for validation and data extraction.\n   - **Database File**: The system interacts with a database file (e.g., `.xlsx`, `.xls`, `.ods`, `.csv`) for managing profiles.\n   - **Users**: Users interact with the system by providing input files and database files, and by receiving the generated Excel files.\n\n3. **Data Flows**:\n   - **Input File to File Validation**: Input files are read and processed by the `FileValidation` class to extract and validate data.\n   - **Database File to DBInteraction**: The database file is read by the `DBInteraction` class to load and manage profiles.\n   - **File Validation to Users**: The results of the file validation process, including categories, rater IDs, text, and labels, are made available to users.\n   - **DBInteraction to Users**: The profiles managed by the `DBInteraction` class are made available to users.\n   - **Analysis Results to Excel File**: The `write_excel` function writes the analysis results to an Excel file, which is then provided to users.\n\n---\n\nThis summary captures the key elements required for creating a system context diagram based on the provided file content."], ["C:\\Users\\t.kubera\\dev\\hackathon\\hackathon_code_gen\\resources\\IIRA\\core\\metrics.py", "### Summary:\n\n1. **Processes**:\n   - **Metrics Class Initialization**: The `__init__` method initializes the `Metrics` class, setting up the analysis based on the scale format and handling exceptions.\n   - **Cohen's Kappa Calculation**: The `cohens_kappa` method calculates Cohen's Kappa using the `conger` method from the `irrCAC` library.\n   - **Fleiss' Kappa Calculation**: The `fleiss_kappa` method calculates Fleiss' Kappa using the `fleiss` method from the `irrCAC` library.\n   - **Gwet's AC Calculation**: The `gwets_ac` method calculates Gwet's AC using the `gwet` method from the `irrCAC` library.\n   - **Krippendorff's Alpha Calculation**: The `krippendorfs_alpha` method calculates Krippendorff's Alpha using the `krippendorff` method from the `irrCAC` library.\n   - **G Index Calculation**: The `g_index` method calculates the G Index based on the overall agreement.\n   - **Intraclass Correlation Coefficient (ICC) Calculation**: The `icc` method calculates the ICC using the `pingouin` library.\n   - **Overall Agreement Calculation**: The `overall_agreement` method calculates the overall agreement between replications.\n   - **Metric Mapping**: The `map_metrics` function maps metric names to their corresponding method names.\n\n2. **External Entities**:\n   - **Users**: Implicitly represented as the entities that will interact with the `Metrics` class and its methods.\n   - **Data Sources**: The `ratings` data provided to the `Metrics` class, which is used for various calculations.\n\n3. **Data Flows**:\n   - **Initialization Data Flow**: Data such as `scale_format`, `categories`, `ratings`, and `weights` are passed to the `Metrics` class during initialization.\n   - **Analysis Data Flow**: The `ratings` data is used to create an analysis object (`CAC` or ICC) based on the scale format.\n   - **Calculation Data Flow**: Methods like `cohens_kappa`, `fleiss_kappa`, `gwets_ac`, and `krippendorfs_alpha` use the analysis object to calculate respective metrics.\n   - **Overall Agreement Data Flow**: The `overall_agreement` method processes the `ratings` data to calculate the agreement between replications.\n   - **Metric Mapping Data Flow**: The `map_metrics` function takes a metric name as input and returns the corresponding method name.\n\nIf you need further details or additional files analyzed, please let me know!"], ["C:\\Users\\t.kubera\\dev\\hackathon\\hackathon_code_gen\\resources\\IIRA\\core\\__init__.py", "Sure, I can help with that. Please provide the content of the file you are analyzing from the GitHub repository."], ["C:\\Users\\t.kubera\\dev\\hackathon\\hackathon_code_gen\\resources\\IIRA\\data\\__init__.py", "Sure, I can help with that. Please provide the content of the file you are analyzing from the GitHub repository."], ["C:\\Users\\t.kubera\\dev\\hackathon\\hackathon_code_gen\\resources\\IIRA\\gui\\analyseframe.py", "### Summary:\n\n1. **Processes**:\n   - **analyse_start**: Initiates the analysis process by collecting selected metrics and IDs, and validating the input.\n   - **populate_rater_container**: Populates the rater container with IDs and their respective intra and inter-rater variables.\n   - **populate_metrics_container**: Populates the metrics container based on the scale format.\n   - **toggle**: Toggles the selection of all IDs or metrics.\n   - **update_frame**: Updates the frame with the latest data.\n   - **calculate_results**: Calculates the reliability analyses based on selected metrics and IDs.\n   - **populate_intra_results**: Populates the intra-rater results.\n   - **populate_inter_results**: Populates the inter-rater results.\n   - **export_cmd**: Exports the results to a file.\n   - **help_cmd**: Opens the help frame.\n\n2. **External Entities**:\n   - **Users**: Interact with the GUI to select raters, metrics, and initiate the analysis.\n   - **File System**: Used for exporting results to a file.\n\n3. **Data Flows**:\n   - **User to System**: Users select raters and metrics, and initiate the analysis (`analyse_start`).\n   - **System to User**: The system displays error messages if the input is invalid (`messagebox.showerror`).\n   - **System to File System**: The system exports the analysis results to a file (`export_cmd`).\n   - **System to System**: Internal data flow between methods to update frames and calculate results (`update_frame`, `calculate_results`, `populate_intra_results`, `populate_inter_results`).\n\n---\n\nThis summary captures the key elements required for creating a system context diagram based on the provided file content."], ["C:\\Users\\t.kubera\\dev\\hackathon\\hackathon_code_gen\\resources\\IIRA\\gui\\containerframe.py", "### Summary:\n\n1. **Processes**:\n   - **init_menu_bar**: Initializes the menu bar with various frames and labels.\n   - **on_enter**: Handles the event when the mouse enters a frame.\n   - **on_leave**: Handles the event when the mouse leaves a frame.\n   - **toggle_color_mode**: Toggles between light and dark mode for the application.\n   - **create_table**: Creates a table with given headings and content.\n   - **profile_cmd**: Switches to the profile frame.\n   - **home_cmd**: Initializes and shows the main frame.\n   - **help_cmd**: Placeholder for help command functionality.\n   - **update_frame**: Placeholder for updating the frame, to be implemented in inherited classes.\n\n2. **External Entities**:\n   - **User**: Interacts with the GUI elements such as buttons and labels (e.g., clicking on \"Home\", \"Profil\", \"Hilfe\").\n   - **ProfileFrame**: An external frame that is instantiated when the profile command is executed.\n\n3. **Data Flows**:\n   - **User Actions**: \n     - Clicking on \"Home\" or \"Profil\" triggers `home_cmd` or `profile_cmd` respectively.\n     - Hovering over frames triggers `on_enter` and `on_leave` events.\n   - **ProfileFrame**: Data flow occurs when `ProfileFrame` is instantiated within `profile_cmd`.\n   - **Container**: Data flow between the `ContainerFrame` and its `container` attribute, which is used to access icons and styles.\n\n### Additional Notes:\n- The file primarily focuses on GUI-related processes and user interactions.\n- The `help_cmd` and `update_frame` methods are placeholders and do not contain implemented functionality.\n- The `container` object is central to many processes, indicating it plays a significant role in the system's context."], ["C:\\Users\\t.kubera\\dev\\hackathon\\hackathon_code_gen\\resources\\IIRA\\gui\\fileframes.py", "### Summary:\n\n1. **Processes**:\n   - **populate_frame**: Populates the frame based on the mode (either \"analyse\" or other).\n   - **populate_weights**: Populates the weights options and their descriptions.\n   - **populate_scaletype**: Populates the scale type options and their descriptions.\n   - **next_cmd**: Handles the transition to the next frame, updating the container's scale format and weights.\n   - **help_cmd**: Displays the help frame for the current context.\n   - **update_frame**: Updates the frame by clearing previous widgets and repopulating based on the current mode.\n   - **populate_format_preview**: Populates the format preview based on the selected scale format.\n   - **select_file**: Handles file selection and validation, updating the container with file data.\n\n2. **External Entities**:\n   - **User**: Interacts with the GUI to select scale types, weights, and files.\n   - **File System**: Interacts with the system to import files (Excel, LibreOffice Calc, CSV).\n\n3. **Data Flows**:\n   - **User to System**:\n     - Selecting scale types and weights (via `populate_scaletype` and `populate_weights`).\n     - Selecting a file to import (via `select_file`).\n   - **System to User**:\n     - Displaying scale type and weight options (via `populate_scaletype` and `populate_weights`).\n     - Displaying file import options and format previews (via `populate_format_preview`).\n     - Displaying error messages if file import fails (via `select_file`).\n   - **File System to System**:\n     - Importing file data into the system (via `select_file`).\n\nThis summary captures the primary functions, external entities, and data flows based on the provided file content."], ["C:\\Users\\t.kubera\\dev\\hackathon\\hackathon_code_gen\\resources\\IIRA\\gui\\helperframes.py", "### Summary:\n\n1. **Processes**: \n   - **Profile Management**: Creating, deleting, and switching user profiles.\n   - **Help and Documentation**: Providing help and documentation for various functionalities such as general help, analysis preparation, results interpretation, and rating.\n   - **Data Import**: Importing data in specified formats for analysis.\n   - **Analysis Preparation**: Selecting raters and metrics for reliability analysis.\n   - **Results Display**: Displaying the results of intra- and inter-rater reliability analyses.\n   - **Rating**: Allowing users to rate imported data.\n\n2. **External Entities**: \n   - **User**: Interacts with the system to manage profiles, seek help, import data, prepare for analysis, view results, and rate data.\n   - **Web Resources**: URLs provided for additional information and documentation (e.g., https://irrcac.readthedocs.io, https://journals.sagepub.com).\n\n3. **Data Flows**: \n   - **User Input**: Users provide input for creating new profiles, switching profiles, and rating data.\n   - **Profile Data**: Data related to user profiles is managed and updated.\n   - **Help Content**: Help content is displayed to the user based on their current context.\n   - **Imported Data**: Data is imported from external files for analysis.\n   - **Analysis Configuration**: Users configure analysis by selecting raters and metrics.\n   - **Analysis Results**: Results of the analysis are displayed to the user.\n   - **Web Links**: Users can access external web resources for additional information.\n\n---\n\nThis summary captures the key elements from the provided file content, focusing on the primary functions, external entities, and data flows within the system."], ["C:\\Users\\t.kubera\\dev\\hackathon\\hackathon_code_gen\\resources\\IIRA\\gui\\mainframe.py", "### Summary:\n\n1. **Processes**:\n   - **Profile Management**: The `no_profile` method handles the creation of a new user profile if none exists.\n   - **Data Analysis**: The `start_mode` method initiates different modes of analysis, such as \"analyse\" and \"rate\".\n   - **User Interaction**: The GUI elements (buttons, labels, etc.) facilitate user interaction for importing datasets, starting analyses, and creating profiles.\n\n2. **External Entities**:\n   - **User**: Interacts with the system through the GUI to import datasets, start analyses, and create profiles.\n   - **Database Interaction**: Referenced in `container.dbinteraction` for profile management, indicating interaction with a database to store and retrieve user profiles.\n\n3. **Data Flows**:\n   - **User Input**: Data flows from the user to the system when creating a profile (`user_input` in `no_profile` method).\n   - **Profile Data**: Data flows between the system and the database during profile creation (`self.container.dbinteraction.create_profile`).\n   - **Mode Selection**: Data flows within the system when a user selects a mode (e.g., \"analyse\" or \"rate\") via the `start_mode` method, which updates the system state and displays the appropriate frame.\n\nThis summary captures the primary functions, external entities, and data flows based on the provided file content."], ["C:\\Users\\t.kubera\\dev\\hackathon\\hackathon_code_gen\\resources\\IIRA\\gui\\rateframe.py", "### Summary:\n\n1. **Processes**:\n   - **Initialization**: The `__init__` method initializes the `RateFrame` class, setting up the GUI components and binding events.\n   - **Navigation**: Methods like `next_cmd`, `prev_cmd`, and `doubleclick_treeview` handle navigation through text elements.\n   - **Randomization**: The `randomize` method shuffles and unshuffles the text and ratings.\n   - **Category Management**: Methods like `populate_categories`, `delete_categories`, and `cat_hotkey_cmd` manage the categories for rating.\n   - **Text Management**: Methods like `populate_text`, `add_newlines`, and `count_upper_case` handle the display and formatting of text.\n   - **Rating Management**: Methods like `label_text`, `populate_percentage`, and `labeling_finished` manage the rating process and update the GUI accordingly.\n   - **File Operations**: Methods like `save_cmd` and `delete_cmd` handle saving and deleting rating sessions.\n   - **Help and Home Commands**: Methods like `help_cmd` and `home_cmd` provide additional functionalities like help and returning to the main frame.\n\n2. **External Entities**:\n   - **User**: Interacts with the GUI to navigate, rate, save, and delete sessions.\n   - **File System**: Interacts with the system to save and load files (e.g., `tk.filedialog.asksaveasfilename`).\n\n3. **Data Flows**:\n   - **User to System**: \n     - Navigation commands (e.g., `next_cmd`, `prev_cmd`).\n     - Rating inputs (e.g., `label_text`, `cat_hotkey_cmd`).\n     - File operations (e.g., `save_cmd`, `delete_cmd`).\n   - **System to User**:\n     - Display updates (e.g., `populate_text`, `populate_percentage`).\n     - Confirmation dialogs (e.g., `messagebox.askyesno`).\n   - **System to File System**:\n     - Saving ratings to a file (e.g., `save_cmd`).\n     - Loading icons and other resources (e.g., `self.container.save_icon`).\n\nThis summary captures the primary functions, external entities, and data flows based on the provided file content."], ["C:\\Users\\t.kubera\\dev\\hackathon\\hackathon_code_gen\\resources\\IIRA\\gui\\__init__.py", "Sure, I can help with that. Please provide the content of the file you are analyzing from the GitHub repository."]]