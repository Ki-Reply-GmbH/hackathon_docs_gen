{"C:\\Users\\t.kubera\\dev\\hackathon\\hackathon_code_gen\\resources\\IIRA\\app.py": [{"App": {"__init__": "\"\"\"\nInitializes the main application window for the IIRA system.\n\nThis method sets up the main window with a title, geometry, and minimum size. It configures the grid layout, initializes the database interaction, loads icons, and sets the theme for the application. It also initializes all frames used in the application and displays the main frame.\n\"\"\"", "show_frame": "        \"\"\"\n        Raises the specified frame to the top of the stack in the application window.\n\n        Args:\n            frame_name (str): The name of the frame to be raised.\n        \"\"\"", "load_icons": "\"\"\"\nLoads and initializes all the icons used in the application from the specified file paths.\n\nThis method sets up various icons for the application interface, including icons for app logo, file selection, home, profile, help, face, rate, analyse, tooltip, save, delete, light mode, dark mode, unchecked, and checked states. These icons are loaded as `ImageTk.PhotoImage` objects and are stored as attributes of the App class.\n\"\"\"", "init_root_frame": "        \"\"\"\n        Initializes and positions the root frame within the main application window.\n\n        This method sets the provided frame to occupy the entire grid cell at the top-left\n        corner of the application window, stretching it to fill the entire space available.\n\n        Args:\n            frame (tk.Frame): The frame to be initialized and positioned.\n        \"\"\"", "init_frames": "\"\"\"\nInitializes and configures the main frames of the application.\n\nThis method sets up the main frames used in the application by first clearing any existing widgets in each frame and then creating and configuring new instances of each frame type. It ensures that each frame is properly grid positioned and stored in the application's frame dictionary for easy access and management.\n\"\"\"", "App": "\"\"\"\nThe App class serves as the main application window for the IIRA system.\n\nThis class is responsible for setting up and managing the main window, including its title, geometry, and layout. It initializes the database interaction, loads icons, and sets the theme for the application. The class also manages the various frames used within the application, providing methods to initialize, configure, and display these frames as needed.\n\nAttributes:\n    Various icons used in the application interface, stored as `ImageTk.PhotoImage` objects.\n    A dictionary of frames for easy access and management.\n\nMethods:\n    __init__: Initializes the main application window.\n    show_frame: Raises the specified frame to the top of the stack.\n    load_icons: Loads and initializes all the icons used in the application.\n    init_root_frame: Initializes and positions the root frame within the main application window.\n    init_frames: Initializes and configures the main frames of the application.\n\"\"\""}}, {"global": {"[]": "\"\"\"\nInitializes and positions the root frame within the main application window.\n\nThis method sets the provided frame to occupy the entire grid cell at the top-left\ncorner of the application window, stretching it to fill the entire space available.\n\nArgs:\n    frame (tk.Frame): The frame to be initialized and positioned.\n\"\"\""}}], "C:\\Users\\t.kubera\\dev\\hackathon\\hackathon_code_gen\\resources\\IIRA\\__init__.py": ["This file is empty."], "C:\\Users\\t.kubera\\dev\\hackathon\\hackathon_code_gen\\resources\\IIRA\\core\\create_analyses.py": [{"CreateAnalyses": {"`__init__`": "\"\"\"\nInitialize the CreateAnalyses class with necessary data for performing intra and inter analyses.\n\nParameters:\n    intra_id_list (list): List of IDs for intra analysis.\n    inter_id_list (list): List of IDs for inter analysis.\n    intra_metrics (object): Metrics object for intra analysis.\n    inter_metrics (object): Metrics object for inter analysis.\n    scale_format (str): The format of the scale used in the analysis.\n    categories (list): List of categories involved in the analysis.\n    weights (dict): Dictionary of weights for each category.\n    data (dict): Data used for the analysis, formatted according to the labels format in the FileValidation class.\n\"\"\"", "`create_intra_analyses`": "\"\"\"\nConducts intra-analysis for each ID in the intra_id_list using the provided data and metrics.\n\nThis method iterates over each ID in the intra_id_list, retrieves the corresponding intra-ratings,\nand computes the analysis using the Metrics class. The results are stored in the 'results' dictionary\nunder the 'intra' key, indexed by the ID. Debug information is printed if debugging is enabled.\n\"\"\"", "`create_inter_analyses`": "\"\"\"\nCompiles inter-rater analysis results based on the provided inter-rater IDs and metrics.\n\nThis method aggregates ratings from different raters for the same items, computes the analysis using the specified metrics, scale format, categories, and weights, and stores the results in the 'inter' key of the results dictionary.\n\"\"\"", "`find_intra_ratings`": "\"\"\"\nExtracts intra-rater ratings for a given ID from the dataset.\n\nThis method processes the data for a specific ID to compile the ratings given by the same rater across multiple instances.\nIt filters out entries where the label is missing or is a null value. It also ensures that only subjects rated more than once by the same rater are included in the final DataFrame, which is crucial for intra-rater reliability analysis.\n\nParameters:\n    id (int): The identifier for the rater whose intra-ratings are to be extracted.\n\nReturns:\n    pd.DataFrame: A DataFrame where the index represents the subjects and the columns contain the ratings given by the rater.\n\"\"\"", "`find_inter_ratings`": "\"\"\"\nCompiles inter-rater ratings from multiple raters into a structured DataFrame.\n\nThis method aggregates ratings from different raters specified in `self.inter_id_list` for each subject. It ensures that each subject's ratings are collected from all raters, avoiding duplicates that are only relevant for intra-rater analysis. The method constructs a dictionary where each key is a subject and the value is a list of ratings from different raters. This dictionary is then converted into a pandas DataFrame.\n\nReturns:\n    pandas.DataFrame: A DataFrame where the index represents the subjects and each row contains the list of ratings provided by different raters.\n\"\"\"", "CreateAnalyses": "\"\"\"\nThe CreateAnalyses class is designed to perform both intra-rater and inter-rater analyses using provided data and metrics.\n\nThis class facilitates the following:\n- Initialization with necessary data and parameters for conducting analyses.\n- Conducting intra-rater analysis for each ID in the intra_id_list.\n- Compiling inter-rater analysis results based on the provided inter-rater IDs and metrics.\n- Extracting intra-rater ratings for a given ID from the dataset.\n- Compiling inter-rater ratings from multiple raters into a structured DataFrame.\n\nAttributes:\n    intra_id_list (list): List of IDs for intra analysis.\n    inter_id_list (list): List of IDs for inter analysis.\n    intra_metrics (object): Metrics object for intra analysis.\n    inter_metrics (object): Metrics object for inter analysis.\n    scale_format (str): The format of the scale used in the analysis.\n    categories (list): List of categories involved in the analysis.\n    weights (dict): Dictionary of weights for each category.\n    data (dict): Data used for the analysis, formatted according to the labels format in the FileValidation class.\n\"\"\""}}, {"global": {"[]": "\"\"\"\nCompiles inter-rater ratings from multiple raters into a structured DataFrame.\n\nThis method aggregates ratings from different raters specified in `self.inter_id_list` for each subject. It ensures that each subject's ratings are collected from all raters, avoiding duplicates that are only relevant for intra-rater analysis. The method constructs a dictionary where each key is a subject and the value is a list of ratings from different raters. This dictionary is then converted into a pandas DataFrame.\n\nReturns:\n    pandas.DataFrame: A DataFrame where the index represents the subjects and each row contains the list of ratings provided by different raters.\n\"\"\""}}], "C:\\Users\\t.kubera\\dev\\hackathon\\hackathon_code_gen\\resources\\IIRA\\core\\fileinteraction.py": [{"FileValidation": {"`__init__": "        \"\"\"\n        Initialize the DBInteraction instance with a specified database path.\n\n        This method sets up the initial state by determining the file type (Excel or CSV),\n        reading the database content, and initializing various attributes used for profile management.\n        It also loads existing profiles from the database.\n\n        Parameters:\n            db_path (str): The path to the database file containing user profiles.\n        \"\"\"", "check_format": "\"\"\"\nDetermines the format of the data file based on the column headers.\n\nThis method checks the column headers of the data file loaded into the `content` DataFrame.\nIt sets the `format` attribute of the class to \"Format 1\" if the header \"Rater ID\" is found,\nor to \"Format 2\" if the header \"Subject\" is found. If neither header is present, it raises a ValueError.\n\nRaises:\n    ValueError: If neither \"Rater ID\" nor \"Subject\" headers are found in the columns.\n\"\"\"", "find_categories": "        \"\"\"\n        Extracts unique categories from the 'Categories' column of the content DataFrame.\n\n        This method iterates over each item in the 'Categories' column of the DataFrame stored in self.content.\n        It appends each non-null and unique category to the self.categories list attribute of the class.\n        \"\"\"", "find_rater_ids": "\"\"\"\nIdentifies and stores unique rater IDs from the dataset based on the specified format.\n\nThis method checks the format of the dataset and extracts rater IDs accordingly.\nIf the format is \"Format 1\", it extracts IDs from the \"Rater ID\" column.\nIf the format is \"Format 2\", it identifies headers that are not \"Subject\" and considers them as rater IDs.\nAdditionally, if the scale format is \"nominal\" or \"ordinal\", it further filters these headers to include only those that match the predefined categories.\n\"\"\"", "find_text": "\"\"\"\nExtracts and processes text data from the content based on the specified format and scale format.\n\nThis method identifies and extracts text data from the loaded content, applying different logic\nbased on the current format ('Format 1' or 'Format 2') and scale format ('nominal' or 'ordinal').\nThe extracted text is then processed using the `nlp` method to format it appropriately.\n\nFor 'Format 1':\n    - If the scale format is 'nominal' or 'ordinal', it extracts headers that are not in the\n      categories or rater IDs and processes them.\n    - Otherwise, it processes all headers except 'Rater ID'.\nFor 'Format 2':\n    - It processes the 'Subject' column values.\n\nThe processed text is stored in `self.text` and the formatted version in `self.formatted_text`.\n\"\"\"", "find_labels": "\"\"\"\n        Extracts and organizes labels from the dataset based on the specified format and scale format.\n\n        This method processes the dataset to associate text entries with their corresponding labels based on the rater's ID.\n        It handles two different data formats:\n        - Format 1: Assumes a direct mapping between 'Rater ID' and text entries.\n        - Format 2: Uses 'Subject' as a key to map raters to their ratings.\n\n        The labels are stored in a dictionary where each key is a rater's ID and the value is a list of tuples.\n        Each tuple contains a formatted text entry and its associated label as rated by the rater.\n        \"\"\"", "write_file": "\"\"\"\nWrites the combined data of old and new ratings to a file specified by the path.\n\nThis method processes the ratings provided, combines them with existing data,\nand writes the result to a file. The file format is determined by the file extension\nin the path. Supported formats include .xlsx, .xls, .ods, and CSV.\n\nParameters:\n- path (str): The file path where the data will be written. The file extension determines the format.\n- ratings (list of tuples): A list of tuples, where each tuple contains the profile and rating.\n\nThe method handles different data formats and scale formats, and it appends a timestamp to new entries.\n\"\"\"", "usr_to_id": "\"\"\"\nGenerate a unique identifier for a user by prefixing a given username with 'ir_app_'.\n\nParameters:\n    user (str): The username for which the identifier will be generated.\n\nReturns:\n    str: A unique identifier for the user.\n\"\"\"", "nlp`": "\"\"\"\nProcess and format the input text by extracting the most relevant content within brackets and removing numeric suffixes.\n\nThis method is specifically designed to handle text that includes metadata about sentence polarity. It extracts the\nmain content within brackets and removes any trailing numeric suffixes from the text, which are often present in\nstructured or semi-structured data formats.\n\nParameters:\n- text (str): The text to be processed, which may include metadata and numeric suffixes.\n\nReturns:\n- str: The processed text with relevant content extracted and numeric suffixes removed.\n\"\"\"", "FileValidation": "\"\"\"\nFileValidation class for managing and processing user profile data from various file formats.\n\nThis class provides methods to initialize and manage user profile data stored in different file formats (Excel, CSV).\nIt includes functionalities to determine the file format, extract unique categories, identify rater IDs, process text data,\norganize labels, and write combined data to a file. Additionally, it offers utility methods for generating unique user identifiers\nand processing text to extract relevant content.\n\nAttributes:\n    db_path (str): The path to the database file containing user profiles.\n    content (DataFrame): The DataFrame holding the loaded data from the file.\n    format (str): The determined format of the data file (\"Format 1\" or \"Format 2\").\n    categories (list): A list of unique categories extracted from the data.\n    text (list): A list of processed text entries from the data.\n    formatted_text (list): A list of formatted text entries.\n    labels (dict): A dictionary mapping rater IDs to their corresponding text entries and labels.\n\nMethods:\n    __init__(db_path): Initializes the FileValidation instance with a specified database path.\n    check_format(): Determines the format of the data file based on the column headers.\n    find_categories(): Extracts unique categories from the 'Categories' column of the content DataFrame.\n    find_rater_ids(): Identifies and stores unique rater IDs from the dataset based on the specified format.\n    find_text(): Extracts and processes text data from the content based on the specified format and scale format.\n    find_labels(): Extracts and organizes labels from the dataset based on the specified format and scale format.\n    write_file(path, ratings): Writes the combined data of old and new ratings to a file specified by the path.\n    usr_to_id(user): Generates a unique identifier for a user by prefixing a given username with 'ir_app_'.\n    nlp(text): Processes and formats the input text by extracting the most relevant content within brackets and removing numeric suffixes.\n\"\"\""}}, {"DBInteraction": {"create_profile": "\"\"\"\n        Creates a new profile and updates the active profile to the newly created one.\n\n        This method appends the current active profile to the list of profiles if it is not empty,\n        then sets the new profile as the active profile and updates the database with the new profile information.\n\n        Parameters:\n        - new_profile (str): The name of the new profile to be created and set as active.\n\n        Returns:\n        None\n        \"\"\"", "delete_profile": "\"\"\"\nDeletes the currently active profile from the database, making the first profile in the list the new active profile. Updates the database accordingly.\n\nRaises:\n    IndexError: If there are no profiles available to set as the new active profile after deletion.\n\"\"\"", "change_profile": "\"\"\"\n        Switches the active profile to a specified profile and updates the database accordingly.\n\n        This method changes the currently active profile to the one specified by the 'change_to' parameter.\n        It also updates the list of profiles by moving the newly activated profile to the active position\n        and appending the previously active profile to the list of other profiles. After changing the profile,\n        it calls `write_to_db` to save the changes to the database.\n\n        Parameters:\n            change_to (str): The profile name to which the active profile should be changed.\n\n        Returns:\n            None\n        \"\"\"\n", "write_to_db": "\"\"\"\nWrites the current profile data to the database file.\n\nThis method updates the database file by writing the active profile and the list of other profiles\ninto a DataFrame and then saving it to the specified database path in CSV format.\n\"\"\"", "load_profiles": "\"\"\"\nLoad profiles from the database into the instance.\n\nThis method initializes the active profile and loads additional profiles from the database.\nIf the database contains profiles, the first profile is set as the active profile and the rest are loaded into the profiles list.\nIf there are no profiles in the database, the method returns without making any changes.\n\"\"\"", "DBInteraction": "\"\"\"\nDBInteraction class for managing user profiles in a database.\n\nThis class provides methods to create, delete, change, and load user profiles, as well as to write profile data to a database. It maintains an active profile and a list of other profiles, ensuring that the database is updated accordingly with each operation.\n\nMethods:\n- create_profile(new_profile): Creates a new profile and sets it as the active profile.\n- delete_profile(): Deletes the currently active profile and sets the first profile in the list as the new active profile.\n- change_profile(change_to): Switches the active profile to the specified profile.\n- write_to_db(): Writes the current profile data to the database file.\n- load_profiles(): Loads profiles from the database into the instance.\n\"\"\""}}, {"global": {"write_excel": "\"\"\"\n    Generates an Excel file with intra-rater and inter-rater analysis results.\n\n    This function creates an Excel workbook that includes detailed statistical analysis results\n    for both intra-rater and inter-rater evaluations based on provided metrics and IDs. The workbook\n    contains multiple sections formatted for clarity and ease of understanding, including bold headers\n    and structured data presentation.\n\n    Parameters:\n        analyse (Analysis): An object containing the analysis results.\n        intra_ids (list): List of IDs for intra-rater analysis.\n        intra_metrics (list): List of metrics to be reported for intra-rater analysis.\n        inter_ids (list): List of IDs for inter-rater analysis.\n        inter_metrics (list): List of metrics to be reported for inter-rater analysis.\n        scale_format (str): The scale format of the ratings ('nominal', 'ordinal', etc.).\n        filename (str): The path to the file where the Excel workbook will be saved.\n\n    Returns:\n        None: The function writes directly to an Excel file specified by `filename`.\n\"\"\""}}], "C:\\Users\\t.kubera\\dev\\hackathon\\hackathon_code_gen\\resources\\IIRA\\core\\metrics.py": [{"Metrics": {"__init__": "\"\"\"\nInitialize the Metrics object with specified parameters for scale format, categories, ratings, and weights.\n\nThis constructor sets up the Metrics object by initializing various properties such as scale format, categories, ratings, and the number of subjects. It also determines the type of analysis to be performed based on the scale format, either using irrCAC for ordinal or nominal scales or using pingouin for other types of scales. Additionally, it sets the decimal precision context.\n\nParameters:\n    scale_format (str): The format of the scale, e.g., 'ordinal', 'nominal'.\n    categories (list): A list of categories applicable to the ratings.\n    ratings (DataFrame): A pandas DataFrame containing the ratings data.\n    weights (list): A list of weights corresponding to the categories.\n\"\"\"", "cohens_kappa": "        \"\"\"\n        Calculate and return the Cohen's Kappa coefficient value for the ratings.\n\n        This method computes the Cohen's Kappa coefficient, a statistical measure of inter-rater reliability\n        or agreement for qualitative (categorical) items. It is generally thought to be a more robust measure\n        than simple percent agreement calculation, as Kappa takes into account the agreement occurring by chance.\n\n        Returns:\n            float: The Cohen's Kappa coefficient value.\n        \"\"\"", "fleiss_kappa": "\"\"\"\nCalculate and return the Fleiss' Kappa coefficient value for the ratings.\n\nThis method computes the Fleiss' Kappa coefficient, a statistical measure for assessing the reliability of agreement between a fixed number of raters when assigning categorical ratings to a number of items. It is an extension of Cohen's Kappa for more than two raters.\n\nReturns:\n    float: The Fleiss' Kappa coefficient value.\n\"\"\"", "gwets_ac": "        \"\"\"\n        Calculate and return Gwet's AC coefficient value for the ratings.\n\n        This method computes Gwet's AC, a statistical measure of inter-rater reliability\n        that is considered to be more stable than other coefficients like Cohen's Kappa,\n        especially in situations with a high prevalence or bias.\n\n        Returns:\n            float: The Gwet's AC coefficient value.\n        \"\"\"", "krippendorfs_alpha": "        \"\"\"\n        Calculates and returns the Krippendorff's alpha coefficient value for inter-rater reliability.\n\n        This method computes the Krippendorff's alpha, a statistical measure of the agreement achieved when coding a set of units based on the level of measurement specified. It is used to assess the reliability of raters (inter-rater reliability).\n\n        Returns:\n            float: The Krippendorff's alpha coefficient value rounded to four decimal places.\n        \"\"\"", "g_index": "        \"\"\"\n        Calculates the G index, a measure of agreement that adjusts the observed agreement for the probability of chance agreement among categories.\n\n        The G index is computed using the formula:\n            G = (P_a - 1/q) / (1 - 1/q)\n        where P_a is the overall agreement and q is the number of categories.\n\n        Returns:\n            float: The G index rounded to four decimal places.\n        \"\"\"", "icc": "\"\"\"\nCalculates the Intraclass Correlation Coefficient (ICC) for assessing the reliability of measurements where quantitative measurements are made on units that are organized into groups.\n\nIt constructs a DataFrame from the ratings data, specifying targets, raters, and ratings, and then uses the `pingouin.intraclass_corr` function to compute the ICC, handling missing data according to the specified policy.\n\nReturns:\n    A pandas DataFrame containing the ICC results, rounded to four decimal places.\n\"\"\"", "overall_agreement": "        \"\"\"\n        Calculates the overall agreement among raters for a given set of ratings.\n\n        This method computes the proportion of agreement among raters, adjusted for the number of categories and replications. It supports two scenarios:\n        1. When there are exactly two replications, it calculates the proportion of subjects that received the same category rating from both replications.\n        2. When there are more than two replications, it calculates the agreement based on a more complex formula that considers all possible pairs of ratings for each subject.\n\n        Returns:\n            decimal.Decimal: The overall agreement proportion.\n\n        Raises:\n            ValueError: If there are fewer than two replications per subject, making it impossible to calculate an overall agreement.\n        \"\"\"", "Metrics": "\"\"\"\nThe Metrics class provides a comprehensive suite of methods for calculating various statistical measures of inter-rater reliability and agreement.\n\nThis class is designed to handle different types of scales (e.g., ordinal, nominal) and can compute several coefficients and indices to assess the reliability and agreement among raters. The class supports the calculation of Cohen's Kappa, Fleiss' Kappa, Gwet's AC, Krippendorff's Alpha, the G index, Intraclass Correlation Coefficient (ICC), and overall agreement proportion. It is initialized with parameters for scale format, categories, ratings, and weights, and it determines the appropriate type of analysis based on the scale format.\n\nAttributes:\n    scale_format (str): The format of the scale, e.g., 'ordinal', 'nominal'.\n    categories (list): A list of categories applicable to the ratings.\n    ratings (DataFrame): A pandas DataFrame containing the ratings data.\n    weights (list): A list of weights corresponding to the categories.\n\nMethods:\n    cohens_kappa(): Calculate and return the Cohen's Kappa coefficient value for the ratings.\n    fleiss_kappa(): Calculate and return the Fleiss' Kappa coefficient value for the ratings.\n    gwets_ac(): Calculate and return Gwet's AC coefficient value for the ratings.\n    krippendorfs_alpha(): Calculate and return the Krippendorff's alpha coefficient value for inter-rater reliability.\n    g_index(): Calculate and return the G index, a measure of agreement that adjusts for the probability of chance agreement among categories.\n    icc(): Calculate and return the Intraclass Correlation Coefficient (ICC) for assessing the reliability of measurements.\n    overall_agreement(): Calculate and return the overall agreement among raters for a given set of ratings.\n\"\"\""}}, {"global": {"map_metrics": "\"\"\"\nMaps a human-readable metric name to its corresponding method name in the analysis object.\n\nArgs:\n    metric (str): A string representing the name of the metric. This can be one of the following:\n                  \"Cohen's-|Conger's \u03ba\", \"Fleiss' \u03ba\", \"Krippendorff's \u03b1\", \"Gwet's AC\".\n\nReturns:\n    str: The method name as a string that corresponds to the given metric.\n\"\"\""}}], "C:\\Users\\t.kubera\\dev\\hackathon\\hackathon_code_gen\\resources\\IIRA\\core\\__init__.py": ["This file is empty."], "C:\\Users\\t.kubera\\dev\\hackathon\\hackathon_code_gen\\resources\\IIRA\\data\\__init__.py": ["This file is empty."], "C:\\Users\\t.kubera\\dev\\hackathon\\hackathon_code_gen\\resources\\IIRA\\gui\\analyseframe.py": [{"AnalyseFrame": {"__init__": "\"\"\"\nInitialize the AnalyseFrame with a specified container.\n\nThis method sets up the frame for analysis, including the configuration of various\nmetrics for intra-rater and inter-rater reliability analysis. It also initializes\nthe GUI components such as buttons, labels, and frames necessary for the analysis\nprocess.\n\nArgs:\n    container (tk.Widget): The parent widget in which this frame is contained.\n\"\"\"\n", "analyse_start": "\"\"\"\nInitiates the analysis process based on selected rater IDs and metrics.\n\nThis method collects all selected intra-rater and inter-rater metrics and IDs,\nvalidates the selections, and proceeds to display the results in the ResultsFrame.\nIt handles various validation checks such as ensuring there are enough raters for\ninter-rater analysis and that metrics and rater IDs are selected before proceeding.\n\nParameters:\n    container (tk.Frame): The parent container which holds the frame structure.\n\nRaises:\n    tk.messagebox.showerror: If there is an invalid input such as only one rater ID\n                             for inter-rater analysis or no metrics/rater IDs selected.\n\"\"\"", "populate_rater_container": "\"\"\"\nPopulates the rater container with rater IDs and their corresponding checkbuttons for intra-rater and inter-rater selections.\n\nThis method retrieves a list of rater IDs from the container's `rater_ids` attribute, initializes checkbutton variables\nfor each rater ID for both intra-rater and inter-rater analysis, and creates a table in the rater container frame with\nthese checkbuttons. Each row in the table corresponds to a rater ID and includes checkbuttons to select or deselect\nthat ID for intra-rater and inter-rater analysis.\n\"\"\"", "populate_metrics_container": "\"\"\"\nPopulates the metrics container based on the scale format of the data. It dynamically adjusts the available metrics\nfor intrarater and interrater analysis based on the scale format (nominal, ordinal, interval, or rational).\nIt then creates a table displaying these metrics with options to select for analysis.\n\"\"\"", "map_metric_to_var": "\"\"\"\nMaps a given metric name to its corresponding tkinter variable based on the mode.\n\nArgs:\n    mode (str): Specifies the mode as either 'intra' or 'inter'.\n    metric_name (str): The name of the metric to map.\n\nReturns:\n    tkinter.IntVar: The tkinter variable associated with the given metric name and mode.\n\"\"\"", "toggle": "\"\"\"\nToggles the selection state of all IDs or metrics based on the provided mode.\n\nThis method checks if all IDs or metrics are selected. If they are, it deselects all;\notherwise, it selects all. It also updates the button text accordingly to reflect the\ncurrent state (either \"Alle ausw\u00e4hlen\" for select all or \"Alle abw\u00e4hlen\" for deselect all).\n\nParameters:\n- mode (str): Determines the type of items to toggle. Accepts 'id' for toggling rater IDs\n              or 'metric' for toggling metrics.\n\"\"\"", "help_cmd": "        \"\"\"\n        Opens a help frame specific to the preparation and analysis phase.\n\n        This frame provides guidance and information related to the analysis setup process.\n        \"\"\"", "update_frame": "\"\"\"\nUpdates the frame by populating it with dynamically generated data. It calculates the results based on selected metrics and IDs, then populates the intra-rater and inter-rater results sections accordingly.\n\"\"\"", "AnalyseFrame": "\"\"\"\nThe AnalyseFrame class is designed to facilitate the setup and execution of intra-rater and inter-rater reliability analysis within a graphical user interface (GUI) environment.\n\nThis class provides methods to initialize the analysis frame, populate it with rater IDs and metrics, and manage the selection and validation of these elements. It supports dynamic adjustment of available metrics based on the data's scale format and offers functionality to toggle the selection state of all IDs or metrics. Additionally, it includes methods to initiate the analysis process, update the frame with results, and provide help information related to the analysis setup.\n\nAttributes and methods within this class ensure that users can efficiently configure and execute reliability analyses, with appropriate validation and user guidance throughout the process.\n\"\"\""}}, {"ResultsFrame": {"calculate_results": "\"\"\"\nCalculate the reliability analyses based on the selected intra-rater and inter-rater IDs and metrics.\n\nThis method initializes the reliability analyses using the selected IDs and metrics, along with\nadditional parameters such as scale format, categories, weights, and labels from the container.\nThe results are stored in the `reliability_analyses` attribute of the instance.\n\"\"\"", "populate_intra_results": "\"\"\"\nPopulates the intrarater results tab with calculated reliability metrics for selected intra-rater IDs.\n\nThis method dynamically generates a table displaying the reliability metrics for each selected rater ID.\nIt includes metrics such as Cohen's kappa, Fleiss' kappa, Krippendorff's alpha, Gwet's AC, and ICC,\ndepending on the scale format (nominal, ordinal, interval, or ratio) and the selected metrics.\nAdditional information such as the number of subjects and replicates (if applicable) is also displayed.\n\nThe method handles cases where there are not enough ratings to compute the metrics, and it provides\ndetailed debug information if the debug mode is enabled.\n\"\"\"", "populate_inter_results": "\"\"\"\nPopulates the inter-rater results tab with calculated metrics and displays them in a table format.\n\nThis method checks if there are selected inter-rater IDs and metrics, and if so, it adds a new tab to the notebook widget for displaying inter-rater results. It constructs the table headers based on the selected metrics and, depending on the scale format, adds columns for the number of subjects and raters. The method calculates the metric values using the results from the reliability analyses and displays them in the table. Additionally, it provides information about the scale format and weights used in the analysis.\n\"\"\"", "export_cmd": "\"\"\"\nExport the reliability analysis results to a file.\n\nThis method prompts the user to specify a filename and file type, then exports the\nreliability analysis results to the chosen file format. Supported formats include\nExcel (.xlsx, .xls), LibreOffice Calc (.ods), and CSV (.csv). The method uses the\n`write_excel` function to handle the actual file writing process.\n\"\"\"", "help_cmd": "        \"\"\"\n        Opens a help frame specific to the preparation and analysis phase.\n\n        This frame provides guidance and information related to the analysis setup process.\n        \"\"\"", "update_frame": "\"\"\"\nUpdates the frame by populating it with dynamically generated data. It calculates the results based on selected metrics and IDs, then populates the intra-rater and inter-rater results sections accordingly.\n\"\"\"", "ResultsFrame": "\"\"\"\nA class for managing and displaying the results of reliability analyses.\n\nThe ResultsFrame class is designed to handle the calculation, display, and export of reliability metrics for intra-rater and inter-rater analyses. It provides methods to calculate the reliability analyses based on selected IDs and metrics, populate the results in a user-friendly format, and export the results to various file formats. Additionally, it offers help and guidance for setting up and understanding the analysis process.\n\nAttributes:\n    reliability_analyses (dict): Stores the results of the reliability analyses.\n\nMethods:\n    calculate_results: Initializes and calculates the reliability analyses using selected IDs, metrics, and additional parameters.\n    populate_intra_results: Populates the intrarater results tab with calculated reliability metrics for selected intra-rater IDs.\n    populate_inter_results: Populates the inter-rater results tab with calculated metrics and displays them in a table format.\n    export_cmd: Exports the reliability analysis results to a specified file format.\n    help_cmd: Opens a help frame specific to the preparation and analysis phase.\n    update_frame: Updates the frame by calculating results and populating the intra-rater and inter-rater results sections.\n\"\"\""}}, {"global": {"There are no functions or methods defined in the global scope of the provided code. Therefore, the list of global functions or methods is empty.": "\"\"\"\nInitialize the AnalyseFrame with a specified container.\n\nThis method sets up the frame for analysis, including the configuration of various\nmetrics for intra-rater and inter-rater reliability analysis. It also initializes\nthe GUI components such as buttons, labels, and frames necessary for the analysis\nprocess.\n\nArgs:\n    container (tk.Widget): The parent widget in which this frame is contained.\n\"\"\""}}], "C:\\Users\\t.kubera\\dev\\hackathon\\hackathon_code_gen\\resources\\IIRA\\gui\\containerframe.py": [{"ContainerFrame": {"__init__": "\"\"\"\nInitialize the ContainerFrame with a specified container.\n\nThis method sets up the frame within the given container, configures the style, and initializes the menu bar.\n\nArgs:\n    container: The parent widget in which this frame will be placed.\n\"\"\"", "init_menu_bar": "\"\"\"\nInitializes the menu bar for the ContainerFrame by creating and configuring the menu items.\n\nThis method sets up the menu bar with 'Home', 'Profile', and 'Help' sections, each represented by a frame and a label. \nEach section is interactive, responding to mouse enter and leave events to change styles, and click events to execute specific commands.\n\"\"\"", "on_enter": "\"\"\"\nHandles the mouse entering an element by changing the frame and label styles.\n\nThis method is triggered when the mouse pointer enters the area of a frame or label.\nIt sets the frame's style to a predefined style with an accent color and changes\nthe background color of the label to the accent color.\n\nParameters:\n    frame (ttk.Frame): The frame that the mouse enters.\n    label (ttk.Label): The label within the frame whose background color is changed.\n\"\"\"", "on_leave": "        \"\"\"\n        Restores the default style and background color of the specified frame and label when the mouse leaves the frame.\n\n        This method is typically bound to the `<Leave>` event of a frame and its associated label. It resets the frame's style to the default 'TFrame' style and sets the label's background color to match the default background color of 'TFrame'.\n\n        Parameters:\n            frame (ttk.Frame): The frame that the mouse has left.\n            label (ttk.Label): The label within the frame that needs its background color reset.\n        \"\"\"", "toggle_color_mode": "\"\"\"\nToggles the color mode of the application between light and dark themes.\n\nThis method checks the current state of `container.light_mode`. If it is True, it switches the theme to a dark mode ('forest-dark'). If False, it switches to a light mode ('forest-light'). This change affects the overall appearance of the application's GUI.\n\"\"\"", "create_table": "        \"\"\"\n        Creates a table in the specified parent widget using the provided headings and content.\n\n        Args:\n            parent (ttk.Widget): The parent widget where the table will be created.\n            headings (list): A list of strings representing the column headings.\n            content (list of lists): A list where each sublist represents a row of data.\n\n        The table is created with labels for headings and either labels or checkbuttons for each cell,\n        depending on the data type in the content list. Vertical separators are added between columns,\n        and a horizontal separator is added after the headings.\n        \"\"\"\n", "profile_cmd": "\"\"\"\nActivates the profile management interface by initializing and displaying the ProfileFrame.\n\nThis method is bound to the profile button in the GUI. When the profile button is clicked, this method is called to switch the current view to the ProfileFrame, allowing the user to manage their profile settings.\n\"\"\"", "home_cmd": "\"\"\"\nExecutes the home command which initializes and displays the main frame of the application.\n\nThis method reinitializes the frames within the container and sets the \"MainFrame\" as the visible frame, effectively bringing the user to the home screen of the application.\n\"\"\"", "help_cmd": "        \"\"\"\n        Handles the help command by raising a NotImplementedError when invoked.\n\n        This method is bound to the help button in the GUI. When the help button is clicked,\n        this method is triggered but currently does not have an implementation, indicating\n        that the functionality is yet to be developed or is intentionally left unimplemented.\n\n        Parameters:\n            event (optional): The event object that triggered this method. Defaults to None.\n        \"\"\"", "update_frame": "\"\"\"\nUpdates the current frame in the GUI.\n\nThis method is intended to be implemented in derived classes, where it will handle the specifics of updating the GUI frame based on the context and state of the application. As it stands, it raises a NotImplementedError, indicating that it should be overridden in subclasses.\n\"\"\"", "ContainerFrame": "\"\"\"\nContainerFrame is a class designed to manage and display different frames within a specified container widget in a GUI application.\n\nThe class provides functionality to initialize the frame, configure a menu bar with interactive sections, and handle various user interactions such as mouse events and theme toggling. It also includes methods to create tables, manage profile settings, navigate to the home screen, and handle help commands. The class is intended to be extended, with certain methods meant to be overridden in derived classes to update the GUI frame based on the application's context and state.\n\"\"\""}}, {"global": {"[]": "\"\"\"\nHandles the mouse entering an element by changing the frame and label styles.\n\nThis method is triggered when the mouse pointer enters the area of a frame or label.\nIt sets the frame's style to a predefined style with an accent color and changes\nthe background color of the label to the accent color.\n\nParameters:\n    frame (ttk.Frame): The frame that the mouse enters.\n    label (ttk.Label): The label within the frame whose background color is changed.\n\"\"\""}}], "C:\\Users\\t.kubera\\dev\\hackathon\\hackathon_code_gen\\resources\\IIRA\\gui\\fileframes.py": [{"ScaleFrame": {"__init__": "\"\"\"\nInitialize the ScaleFrame with a specified container.\n\nThis method sets up the ScaleFrame within the given container, configuring the necessary styles,\nvariables, and layout for scale and weight selection interfaces. It also initializes the navigation\nand display components within the frame.\n\nArgs:\n    container (ttk.Frame): The parent container in which this frame will be placed.\n\"\"\"", "populate_frame": "        \"\"\"\n        Populates the frame with appropriate widgets based on the specified mode.\n\n        This method configures the frame's content dynamically depending on the mode provided.\n        If the mode is 'analyse', it populates both scale types and weights. For other modes,\n        it only populates the scale types.\n\n        Parameters:\n            mode (str): The mode of operation which determines the widgets to be displayed.\n                        Expected values are 'analyse' or other specific modes.\n        \"\"\"", "populate_weights": "\"\"\"\nPopulates the weight selection interface in the GUI.\n\nThis method sets up the labels, dropdown menu, and information labels related to the weight options\nwithin the center container of the ScaleFrame. It configures the layout and ensures that the weight\nselection components are displayed correctly, providing users with options to choose how categories\nare weighted in their analysis.\n\"\"\"", "populate_scaletype": "\"\"\"\nPopulates the scale type selection interface within the center container of the ScaleFrame.\n\nThis method sets up labels and an option menu for selecting the scale type, and provides\ninformational labels about each scale type. The scale types include nominal, ordinal,\ninterval, and ratio scales, each described with their characteristics to aid the user\nin making an appropriate selection based on their data analysis needs.\n\"\"\"", "next_cmd": "        \"\"\"\n        Advances the application state by setting the selected scale format and weight, and then transitions to the \"FileFrame\".\n\n        This method retrieves the selected scale format and, if the mode is \"analyse\", also retrieves the selected weight. It then updates the \"FileFrame\" based on these selections and displays it.\n        \"\"\"", "help_cmd": "\"\"\"\nOpens a help dialog specific to the ScaleFrame, providing guidance on scale types and weight options.\n\nParameters:\n    event (tk.Event, optional): The event that triggered the help command. Defaults to None.\n\"\"\"", "update_frame": "\"\"\"\nUpdates the frame by clearing existing widgets and repopulating based on the current mode.\n\nThis method is responsible for refreshing the visual components of the frame whenever\nthe underlying data or state changes, ensuring that the display is consistent with the\ncurrent application context.\n\"\"\"", "ScaleFrame": "\"\"\"\nThe ScaleFrame class is a GUI component designed for selecting scale types and weights for data analysis.\n\nThis class provides an interface within a specified container to facilitate the selection of different scale types (nominal, ordinal, interval, and ratio) and weight options. It dynamically populates the frame based on the mode of operation, supports navigation to other frames, and offers help guidance specific to its functionalities.\n\nAttributes:\n    container (ttk.Frame): The parent container in which this frame is placed.\n\nMethods:\n    __init__(container): Initializes the ScaleFrame with the specified container.\n    populate_frame(mode): Populates the frame with appropriate widgets based on the specified mode.\n    populate_weights(): Sets up the weight selection interface in the GUI.\n    populate_scaletype(): Sets up the scale type selection interface within the center container.\n    next_cmd(): Advances the application state by setting the selected scale format and weight, then transitions to the \"FileFrame\".\n    help_cmd(event=None): Opens a help dialog specific to the ScaleFrame, providing guidance on scale types and weight options.\n    update_frame(): Updates the frame by clearing existing widgets and repopulating based on the current mode.\n\"\"\""}}, {"FileFrame": {"select_file": "\"\"\"\nOpens a file dialog for the user to select a file, and processes the selected file based on the current application mode.\n\nThis method allows the user to select a file from their file system with specific file types (.xlsx, .xls, .ods, .csv).\nAfter a file is selected, it validates and processes the file according to the scale format specified in the container.\nIf the file is valid, it updates the application state and transitions to the appropriate frame based on the mode ('analyse' or 'rate').\n\nParameters:\n    container (ContainerFrame): The container frame that holds the application state and manages transitions between frames.\n\nRaises:\n    messagebox: If the file import fails, an error message is displayed to the user.\n\"\"\"", "help_cmd": "\"\"\"\nOpens a help dialog specific to the ScaleFrame, providing guidance on scale types and weight options.\n\nParameters:\n    event (tk.Event, optional): The event that triggered the help command. Defaults to None.\n\"\"\"", "update_frame": "\"\"\"\nUpdates the frame by clearing existing widgets and repopulating based on the current mode.\n\nThis method is responsible for refreshing the visual components of the frame whenever\nthe underlying data or state changes, ensuring that the display is consistent with the\ncurrent application context.\n\"\"\"", "populate_format_preview": "\"\"\"\nPopulates the specified format container with a preview of data format based on the selected scale format.\n\nThis method dynamically generates a preview of how data should be formatted in the file to be imported,\ndepending on whether the scale format is nominal, ordinal, or other types (like interval or ratio).\nIt adjusts the displayed information and table structure in the GUI to guide the user in preparing their data files correctly.\n\nArgs:\n    format_container (ttk.Frame): The container frame where the format preview will be displayed.\n\nThe method checks the current scale format and populates the appropriate format container with example data,\nheaders, and informational labels that explain the requirements for each data format.\n\"\"\"", "FileFrame": "\"\"\"\nThe FileFrame class is responsible for managing file selection, providing help information, updating the user interface, and previewing data formats within the application.\n\nThis class includes methods to:\n- Open a file dialog for the user to select and process files based on the current application mode.\n- Display help information related to scale types and weight options.\n- Refresh the visual components of the frame to reflect the current application state.\n- Generate and display a preview of the expected data format based on the selected scale format.\n\nThe class interacts with various components of the application to ensure a seamless user experience when importing and preparing data files.\n\"\"\""}}, {"global": {"[]": "        \"\"\"\n        Initialize the FileFrame with a specified container.\n\n        This method sets up the FileFrame within the given container, configuring the necessary styles,\n        variables, and layout for file import interfaces. It also initializes the navigation and display\n        components within the frame.\n\n        Args:\n            container (ttk.Frame): The parent container in which this frame will be placed.\n        \"\"\""}}], "C:\\Users\\t.kubera\\dev\\hackathon\\hackathon_code_gen\\resources\\IIRA\\gui\\helperframes.py": [{"ProfileFrame": {"__init__": "\"\"\"\nInitialize a new instance of the ProfileFrame class, which is a Toplevel window in a tkinter application.\n\nThis window is used for managing user profiles, including creating, deleting, and switching profiles.\n\nArgs:\n    container (tk.Tk): The parent window for this Toplevel window, typically the main application window.\n\"\"\"", "ok_cmd": "\"\"\"\nHandles the 'Ok' button click or 'Return' key press event in the profile management dialog.\n\nIf the user input is empty, the dialog is closed. If there is user input, a new profile is created\nwith the provided name, and the profile-related UI elements are updated accordingly.\n\nParameters:\n- event (Event, optional): The event that triggered this method. Defaults to None.\n\nThis method directly modifies the UI and interacts with the database to create a new profile.\n\"\"\"", "populate_profile_label": "\"\"\"\nUpdates the text of the profile name label with the currently active profile name.\n\"\"\"", "populate_change_profile_menu": "\"\"\"\nPopulates the 'change profile' menu with radio buttons for each user profile.\n\nThis method dynamically creates a radio button for each profile stored in the database interaction layer.\nEach radio button, when selected, triggers the `change_profile` method to switch to the corresponding profile.\n\"\"\"", "create_new_profile": "\"\"\"\nCreates a new user profile by adding an input field to the GUI if it has not been added yet.\n\nThis method checks if the input field for entering a new profile name is already present.\nIf not, it adds a label and an entry widget to the separator frame for the user to input the new profile name.\nThe entry widget is bound to the `ok_cmd` method, which is triggered when the user presses the Return key.\n\"\"\"", "change_profile": "\"\"\"\nChanges the active user profile to the selected one and updates the profile label and menu.\n\nArgs:\n    profile_selection (str): The name of the profile to switch to.\n\"\"\"", "delete_profile": "\"\"\"\nDeletes the currently active profile after ensuring that it is not the only profile available.\n\nThis method checks if there are other profiles available. If no other profiles exist, it prevents\nthe deletion of the current profile and displays an error message. If other profiles are available,\nit proceeds to delete the current profile and updates the profile label and profile menu to reflect\nthe changes.\n\"\"\"", "ProfileFrame": "\"\"\"\nThe ProfileFrame class provides a user interface for managing user profiles within a tkinter application.\n\nThis class is a Toplevel window that allows users to create, delete, and switch between different profiles. It interacts with the database to manage profile data and updates the UI elements accordingly.\n\nKey functionalities include:\n- Initializing the profile management window.\n- Handling the creation of new profiles.\n- Switching between existing profiles.\n- Deleting profiles, ensuring at least one profile remains.\n- Updating the profile name label and the profile selection menu dynamically.\n\nAttributes:\n- container (tk.Tk): The parent window for this Toplevel window, typically the main application window.\n\"\"\""}}, {"ScrollFrame": {"onFrameConfigure": "\"\"\"\nAdjusts the scroll region of the canvas to encompass the entire viewport frame.\n\nThis method is called whenever the viewport frame is reconfigured (e.g., resized).\nIt ensures that the scrollable area of the canvas matches the size of the frame\ncontaining the widgets, allowing for proper scrolling behavior.\n\nParameters:\n- event: The event that triggered this method, which can be a resize or similar.\n         This parameter is not used in the method but is necessary for event binding.\n\"\"\"", "onCanvasConfigure": "\"\"\"\nAdjusts the width of the canvas window to match the canvas width when the canvas size changes.\n\nThis method ensures that the viewport frame within the canvas adjusts its width to fill the\nentire canvas when the canvas itself is resized, maintaining the layout consistency.\n\nParameters:\n- event: A tkinter event object containing information about the canvas configuration change.\n\"\"\"", "onMouseWheel": "\"\"\"\nHandles the mouse wheel event for scrolling the canvas vertically across different platforms.\n\nThis method adjusts the vertical scroll position of the canvas based on the mouse wheel movement.\nIt supports different scrolling increments for Windows, macOS (Darwin), and Linux systems.\n\nArgs:\n    event: A mouse event that contains information about the scroll action.\n\"\"\"\n", "onEnter": "\"\"\"\nBind mouse wheel events to the canvas when the cursor enters the viewport frame.\n\nThis method checks the operating system and binds the appropriate mouse wheel event\nto allow scrolling within the canvas. For Linux, it binds Button-4 and Button-5 for\nscrolling. For other systems, it binds the general MouseWheel event.\n\nArgs:\n    event: The event that triggers this method, typically related to the cursor entering the viewport area.\n\"\"\"\n", "onLeave": "\"\"\"\n    Unbinds the mouse wheel scroll events when the cursor leaves the control area.\n\n    This method ensures that the scroll events are only active when the cursor is\n    within the viewport of the ScrollFrame, enhancing the user experience by preventing\n    unintended scrolls when the cursor is outside the intended area.\n\n    Parameters:\n    - event: The event that triggers this method, typically a cursor leaving the viewport area.\n\"\"\"", "ScrollFrame": "\"\"\"\nA class that provides a scrollable frame within a canvas, allowing for dynamic resizing and platform-specific scrolling behavior.\n\nThe ScrollFrame class manages a viewport frame embedded within a canvas, ensuring that the scrollable area adjusts appropriately to changes in size and user interactions. It handles various events to maintain a consistent and user-friendly scrolling experience across different operating systems.\n\nKey functionalities include:\n- Adjusting the scroll region of the canvas to match the viewport frame size.\n- Ensuring the canvas window width matches the canvas width upon resizing.\n- Handling mouse wheel events for vertical scrolling, with platform-specific adjustments.\n- Binding and unbinding mouse wheel events based on cursor position within the viewport frame.\n\"\"\""}}, {"MainHelpFrame": {"There are no methods or functions defined in the class `MainHelpFrame`. Therefore, the list is empty.": "\"\"\"\nMainHelpFrame is a class designed to manage user profiles within a tkinter application. It provides functionality to create, delete, and switch between different user profiles. This class is typically used as a Toplevel window that acts as a secondary window to the main application window, allowing for separate management of user profiles in a contained and organized manner.\n\"\"\"", "MainHelpFrame": "\"\"\"\nMainHelpFrame is a class designed to manage user profiles within a tkinter application. It provides functionality to create, delete, and switch between different user profiles. This class is typically used as a Toplevel window that acts as a secondary window to the main application window, allowing for separate management of user profiles in a contained and organized manner.\n\"\"\""}}, {"ScaleHelpFrame": {"```plaintext\n": "\"\"\"\nDie Klasse stellt dem SW-User ein Hilsdialog zur Verf\u00fcgung, in Abh\u00e4ngigkeit\nvon dem Frame in dem sich der SW-User aktuell befindet.\nTODO\n\"\"\"", "\n```": "\"\"\"\nChanges the active user profile to the selected one and updates the profile label and menu.\n\nArgs:\n    profile_selection (str): The name of the profile to switch to.\n\"\"\"", "ScaleHelpFrame": "\"\"\"\nThe ScaleHelpFrame class provides a help dialog to the software user, depending on the frame in which the user is currently located. It includes functionality to change the active user profile and update the profile label and menu accordingly.\n\"\"\""}}, {"ImportHelpFrame": {"[]\n": "        \"\"\"\n        Changes the active user profile to the selected one and updates the profile label and menu.\n\n        Args:\n            profile_selection (str): The name of the profile to switch to.\n        \"\"\"", "ImportHelpFrame": "\"\"\"\nThe ImportHelpFrame class is responsible for managing and updating user profiles within the application. \n\nThis class provides functionality to change the active user profile to a selected one, ensuring that the profile label and menu are updated accordingly. It allows users to switch between different profiles seamlessly, reflecting the changes in the user interface.\n\"\"\""}}, {"PrepAnalyseHelpFrame": {"```python\n[]\n```": "\"\"\"\nChanges the active user profile to the selected one and updates the profile label and menu.\n\nArgs:\n    profile_selection (str): The name of the profile to switch to.\n\"\"\"", "PrepAnalyseHelpFrame": "\"\"\"\nThe PrepAnalyseHelpFrame class is designed to manage and switch between different user profiles within an application. \n\nThis class provides functionality to change the active user profile to a selected one, ensuring that the profile label and menu are updated accordingly.\n\nAttributes and methods within this class facilitate seamless profile management, enhancing user experience by allowing quick and efficient profile switching.\n\"\"\""}}, {"ResultsHelpFrame": {"[]": "\"\"\"\nChanges the active user profile to the selected one and updates the profile label and menu.\n\nArgs:\n    profile_selection (str): The name of the profile to switch to.\n\"\"\"", "ResultsHelpFrame": "\"\"\"\nThe ResultsHelpFrame class is responsible for managing user profiles within the application. \n\nIt provides functionality to change the active user profile to a selected one, and subsequently updates the profile label and menu to reflect this change.\n\"\"\""}}, {"RateHelpFrame": {"There are no methods or functions defined in the class `RateHelpFrame`. Therefore, the result is an empty list.": "\"\"\"\nThere are no methods or functions defined in the class `RateHelpFrame`. Therefore, the result is an empty list.\n\"\"\"", "RateHelpFrame": "\"\"\"\nRateHelpFrame is a class that currently does not contain any methods or functions. It serves as a placeholder or a base structure for future development where methods and functionalities related to 'Rate Help' can be added.\n\"\"\""}}, {"global": {"[]": "\"\"\"\nChanges the active user profile to the selected one and updates the profile label and menu.\n\nArgs:\n    profile_selection (str): The name of the profile to switch to.\n\"\"\""}}], "C:\\Users\\t.kubera\\dev\\hackathon\\hackathon_code_gen\\resources\\IIRA\\gui\\mainframe.py": [{"MainFrame": {"__init__": "        \"\"\"\n        Initializes the MainFrame which is a container for various interactive elements and frames.\n\n        This method sets up the main GUI components including buttons, labels, and frames. It configures styles,\n        handles the creation of a profile if none exists, and organizes the layout of the main interface.\n\n        Args:\n            container (tk.Tk): The main application window which acts as the container for this frame.\n        \"\"\"", "start_mode": "        \"\"\"\n        Switches the application mode and updates the interface accordingly.\n\n        This method sets the application mode based on the provided argument and updates the relevant frame to reflect the new mode.\n\n        Parameters:\n            mode (str): The mode to switch to. Expected values are \"analyse\" or \"rate\".\n        \"\"\"", "no_profile": "        \"\"\"\n        Handles the scenario where no user profile is detected by prompting the user to create a new profile.\n\n        This method creates a new top-level window that allows the user to enter a name for a new profile. If the user attempts to create a profile without providing a name, an error message is displayed. If a name is provided, the profile is created in the database, and the window is closed.\n        \"\"\"", "help_cmd": "\"\"\"\nThis method, when called, creates and displays the main help frame for the application.\n\nArgs:\n    event (tk.Event, optional): An optional event parameter for handling events. Defaults to None.\n\"\"\"", "MainFrame": "\"\"\"\nMainFrame is a container for various interactive elements and frames within a GUI application.\n\nThis class is responsible for setting up the main graphical user interface (GUI) components, including buttons, labels, and frames. It configures styles, handles the creation of user profiles, and organizes the layout of the main interface. Additionally, it provides methods to switch application modes, handle scenarios where no user profile is detected, and display the help frame.\n\nAttributes:\n    container (tk.Tk): The main application window which acts as the container for this frame.\n\nMethods:\n    __init__(container): Initializes the MainFrame and sets up the main GUI components.\n    start_mode(mode): Switches the application mode and updates the interface accordingly.\n    no_profile(): Prompts the user to create a new profile if none is detected.\n    help_cmd(event=None): Creates and displays the main help frame for the application.\n\"\"\""}}, {"global": {"[]": "\"\"\"\nThis method, when called, creates and displays the main help frame for the application.\n\n:param event: Optional event parameter for handling events, defaults to None.\n\"\"\""}}], "C:\\Users\\t.kubera\\dev\\hackathon\\hackathon_code_gen\\resources\\IIRA\\gui\\rateframe.py": [{"RateFrame": {"__init__": "\"\"\"\nInitialize the RateFrame with a reference to the container that holds the database interaction and GUI configuration.\n\nArgs:\n    container (ContainerFrame): The parent container frame that holds the database interaction object and GUI styling configurations.\n\"\"\"", "populate_navigation": "\"\"\"\nPopulates the navigation treeview with parent and child nodes based on the text data.\n\nThis method divides the text data into segments and creates a hierarchical view in the treeview widget.\nEach parent node represents a group of text entries, and each child node represents a single text entry.\nThe method ensures that the first parent node and the first child node are expanded and focused upon initialization.\n\"\"\"", "randomize": "        \"\"\"\n        Randomizes the order of text entries and their corresponding ratings based on the specified mode.\n\n        This method can operate in two modes:\n        - \"do\": Shuffles the text entries and their corresponding ratings randomly.\n        - \"undo\": Restores the original order of text entries and their corresponding ratings using a previously stored state.\n\n        Parameters:\n            mode (str): The mode of operation, either \"do\" for shuffling or \"undo\" for restoring original order.\n        \"\"\"", "doubleclick_treeview": "        \"\"\"\n        Handles the double-click event on a treeview item in the text preview.\n\n        This method identifies the treeview item that was double-clicked and updates the text display\n        based on the selected item. It also updates the category selection if a rating already exists for the item.\n\n        Parameters:\n        - event: The event object containing details about the double-click action.\n\n        The method updates the text index to reflect the selected item, populates the text display,\n        and sets the category variable if a rating exists. It ensures the focus is set back to the widget\n        after the operation.\n        \"\"\"", "delete_questions": "\"\"\"\nDeletes all items from the text preview treeview within the RateFrame.\n\nThis method clears the entire treeview used for displaying text elements by removing\neach child node. It is typically used to reset the view when needed.\n\"\"\"", "populate_categories": "        \"\"\"\n        Populates the category selection interface based on the scale format specified in the container.\n\n        This method dynamically creates and displays the appropriate input widgets for category selection in the rating interface.\n        If the scale format is 'intervall' or 'ratio', it sets up an entry field for numerical input. For other scale formats,\n        it creates a series of radio buttons corresponding to the categories available in the container. Additionally, it binds\n        numeric hotkeys to these categories for quick selection if the scale format is 'nominal' or 'ordinal'.\n        \"\"\"", "delete_categories": "        \"\"\"\n        Removes all category-related widgets from the rating button container.\n\n        This method iterates through all child widgets of the `rbtn_container` frame and destroys each one,\n        effectively clearing all category selection options (e.g., radio buttons) from the GUI.\n        \"\"\"", "populate_text": "\"\"\"\nUpdates the text label in the GUI with the current text entry from the text list,\nformatted to include newlines for better readability.\n\nThis method formats the current text entry to fit within the GUI's text display area,\nensuring that the text is broken into lines that do not exceed a certain length,\nmaking it easier to read. It uses the `add_newlines` method to insert newlines at appropriate\npositions based on the length of the text and the presence of uppercase characters.\n\"\"\"", "add_newlines": "\"\"\"\nInserts newlines into the provided text to ensure that no line exceeds the specified length `n`.\n\nThis method first adjusts the maximum line length `n` based on the number of uppercase characters in the text.\nIt then attempts to break the text into lines that do not exceed this length, ideally breaking at space characters\nto avoid breaking words. If a word itself is longer than `n`, it is split with a newline character.\n\nParameters:\n    text (str): The text to be processed.\n    n (int): The desired maximum number of characters per line.\n\nReturns:\n    str: The processed text with newlines inserted to ensure that no line exceeds the length `n`.\n\"\"\"", "count_upper_case": "\"\"\"\n    Adjusts the maximum length of text based on the count of uppercase characters.\n\n    This method counts the number of uppercase characters in the provided text.\n    If the count of uppercase characters is at least half the length of the text,\n    it reduces the provided maximum length 'n' by 25%.\n\n    Parameters:\n        text (str): The text to analyze.\n        n (int): The initial maximum length to consider.\n\n    Returns:\n        int: The adjusted maximum length based on the count of uppercase characters.\n\"\"\"", "entry_input_cmd": "\"\"\"\nHandles the input from the entry field for category ratings.\n\nThis method is triggered when the user presses the 'Return' key in the entry field.\nIt sets the category variable to the value entered, updates the ratings data structure,\nmoves to the next rating item, and clears the entry field.\n\nParameters:\n    event (tk.Event, optional): The event that triggered this method. Defaults to None.\n\"\"\"", "cat_hotkey_cmd": "\"\"\"\nHandles the keyboard shortcut input for category selection in the rating process.\n\nThis method updates the category variable based on the number key pressed by the user.\nIt adjusts the rating in the data structure and updates the navigation frame on the left side\nto reflect the selected category.\n\nParameters:\n- event: The event object containing details of the key press.\n\"\"\"", "next_cmd": "\"\"\"\nAdvances to the next text item in the list, updates the display, and handles the navigation logic.\n\nThis method is bound to the right arrow key and the next button. It updates the text index to the next item,\nupdates the displayed text, and manages the navigation treeview to reflect the current position. If the end of\nthe list is reached, it does nothing. It also handles the display of ratings if they exist for the new text item.\n\nArgs:\n    event: The event that triggered this method, default is None. This is used to handle event bindings.\n\"\"\"", "prev_cmd": "        \"\"\"\n        Navigate to the previous text item in the list.\n\n        This method decrements the text index to move to the previous item in the text list,\n        updates the display to show the previous text, and adjusts the GUI components accordingly.\n        If the current text index is at the start of the list, no action is taken.\n\n        Args:\n            event: An optional event parameter which is not used in the method.\n        \"\"\"", "save_cmd": "        \"\"\"\n        Saves the current ratings to a file.\n\n        This method first undoes any shuffling of text entries if shuffling was applied.\n        It then prompts the user to choose a file name and file type (Excel, Libreoffice Calc, or CSV)\n        and saves the ratings to the specified file using the file validation method from the container.\n        \"\"\"", "delete_cmd": "\"\"\"\nHandles the deletion of the entire rating session after confirmation from the user.\n\nThis method prompts the user with a confirmation dialog asking if they want to discard\nthe entire rating session. If the user confirms, it resets the ratings, clears the\ncategory variable, and updates the frame to reflect these changes.\n\"\"\"", "label_text": "\"\"\"\nHandles the labeling of text elements based on the selected category from the radio buttons or entry field.\nUpdates the internal ratings list, the navigation treeview, and the percentage of labeled items.\n\nThis method is triggered when a category is selected or changed in the GUI. It updates the ratings for the\ncurrent text element, modifies the navigation treeview to reflect the labeling status, and updates the\npercentage of completed labels displayed on the GUI.\n\nArgs:\n    event: An optional event parameter that can be used to trigger this method from a GUI event.\n\"\"\"", "labeling_finished": "\"\"\"\nCheck if all text elements have been rated and prompt the user to save the ratings.\n\nThis method checks if the total number of ratings matches the number of text elements.\nIf all elements have been rated, it prompts the user with a message asking if they\nwant to save the ratings. If the user agrees, it triggers the save command.\n\"\"\"", "populate_percentage": "\"\"\"\nUpdates the percentage of rated text elements and adjusts the style of the percentage label based on the completion rate.\n\nThis method calculates the percentage of text elements that have been rated and updates the text of the percentage label.\nIt also changes the style of the label to reflect different levels of completion using color coding:\n- Red for less than 20% completion\n- Orange for 20% to 39% completion\n- Yellow for 40% to 59% completion\n- Light green for 60% to 79% completion\n- Green for 80% to 100% completion\n\"\"\"", "home_cmd": "\"\"\"\nNavigate the user back to the main frame and optionally save the current session.\n\nThis method prompts the user with a dialog asking if they want to save the current rating session.\nIf the user chooses to save, the `save_cmd` method is called to handle the saving process.\nAfterwards, or if the user chooses not to save, the method initializes the main frames and displays the main frame.\n\nReturns:\n    None\n\"\"\"", "help_cmd": "        \"\"\"\n        Opens the help frame for the RateFrame.\n\n        This method triggers the display of the RateHelpFrame which provides\n        help and guidance on how to use the rating interface.\n\n        Args:\n            event: An optional event parameter that can be passed if the method\n                   is triggered by an event. Defaults to None.\n        \"\"\"", "update_frame": "\"\"\"\nUpdates the frame by setting up the text, ratings, categories, and navigation based on the current state.\n\nThis method is responsible for initializing or updating the text display, ratings, and navigation elements\nwithin the frame. It can also handle randomization of the text order if specified.\n\nArgs:\n    mode (str, optional): If set to \"do\", the text will be randomized. Defaults to None.\n\"\"\"", "RateFrame": "\"\"\"\nRateFrame is a class designed to manage and facilitate the rating of text entries within a graphical user interface (GUI). \n\nThe class provides functionalities to:\n- Initialize the frame with necessary configurations and database interactions.\n- Populate the navigation treeview with hierarchical text data.\n- Randomize the order of text entries and their ratings.\n- Handle user interactions such as double-clicks, keyboard shortcuts, and entry inputs.\n- Manage the display and updating of text entries and their corresponding ratings.\n- Populate and clear category selection widgets.\n- Save, delete, and reset rating sessions.\n- Update the percentage of rated text elements and provide visual feedback on completion.\n- Navigate between different frames and provide help documentation.\n\nOverall, RateFrame serves as a comprehensive interface for users to rate text entries efficiently and intuitively.\n\"\"\""}}, {"global": {"There are no methods or functions defined in the global scope of the provided code. All methods are defined within the `RateFrame` class. Therefore, the list is empty.": "\"DONE\""}}], "C:\\Users\\t.kubera\\dev\\hackathon\\hackathon_code_gen\\resources\\IIRA\\gui\\__init__.py": ["This file is empty."]}