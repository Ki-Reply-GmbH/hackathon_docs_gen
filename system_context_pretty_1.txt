[['C:\\Users\\t.kubera\\dev\\hackathon\\hackathon_code_gen\\resources\\IIRA\\app.py',
  '### Summary:\n'
  '\n'
  '1. **External Systems**:\n'
  '   - **Database**: The file interacts with a local database file named '
  '`internal_db.csv` through the `DBInteraction` class from the '
  '`core.fileinteraction` module. This is evident from the line:\n'
  '     ```python\n'
  '     self.dbinteraction = DBInteraction(os.path.join(file_path, '
  '"data/internal_db.csv"))\n'
  '     ```\n'
  '\n'
  '2. **User Roles**:\n'
  '   - **Not Applicable**: The file does not explicitly define any user roles '
  'or actors. It primarily sets up the graphical user interface (GUI) and does '
  'not specify different user roles.\n'
  '\n'
  '3. **Data Flows**:\n'
  '   - **Incoming Data**: Data is read from the local database file '
  '`internal_db.csv` via the `DBInteraction` class.\n'
  '   - **Outgoing Data**: There is no explicit mention of data being sent out '
  'to external systems or services in this file. The data flow appears to be '
  'internal, primarily involving GUI interactions and local database '
  'operations.\n'
  '\n'
  '4. **Entry Points**:\n'
  '   - **Main Entry Point**: The main entry point of the application is the '
  '`App` class, which is instantiated and run in the `if __name__ == '
  '"__main__":` block:\n'
  '     ```python\n'
  '     if __name__ == "__main__":\n'
  '         app = App()\n'
  '         app.mainloop()\n'
  '     ```\n'
  '   - **GUI Entry Points**: Various frames (e.g., `MainFrame`, `ScaleFrame`, '
  '`FileFrame`, `RateFrame`, `ResultsFrame`, `AnalyseFrame`) are initialized '
  'and managed within the `App` class. The `show_frame` method is used to '
  'display different frames based on user interaction:\n'
  '     ```python\n'
  '     def show_frame(self, frame_name):\n'
  '         frame = self.frames[frame_name]\n'
  '         frame.tkraise()\n'
  '     ```\n'
  '\n'
  'In summary, the file sets up a GUI application that interacts with a local '
  'database file. It does not define specific user roles, and the primary data '
  'flow involves reading from the local database. The main entry point is the '
  'instantiation and running of the `App` class.'],
 ['C:\\Users\\t.kubera\\dev\\hackathon\\hackathon_code_gen\\resources\\IIRA\\core\\create_analyses.py',
  '### Summary:\n'
  '\n'
  '1. **External Systems**:\n'
  '   - **Pandas**: The code interacts with the Pandas library for data '
  'manipulation and analysis.\n'
  '   - **Numpy**: The code interacts with the Numpy library, although it is '
  'not explicitly used in the provided code snippet.\n'
  '   - **Core Metrics**: The code interacts with a custom `Metrics` class '
  'from the `core.metrics` module, which is likely part of the same system but '
  'could be considered an external system if it is a separate service or '
  'module.\n'
  '\n'
  '2. **User Roles**: \n'
  '   - Not Applicable: The provided code does not specify any user roles or '
  'actors that interact with the system.\n'
  '\n'
  '3. **Data Flows**:\n'
  '   - **Input Data**: The `CreateAnalyses` class receives various inputs '
  'such as `intra_id_list`, `inter_id_list`, `intra_metrics`, `inter_metrics`, '
  '`scale_format`, `categories`, `weights`, and `data` through its '
  'constructor.\n'
  '   - **Output Data**: The results of the analyses are stored in the '
  '`self.results` dictionary, which contains the intra and inter analysis '
  'results.\n'
  '   - **Data Manipulation**: The methods `find_intra_ratings` and '
  '`find_inter_ratings` process the input data and convert it into Pandas '
  'DataFrames for further analysis.\n'
  '\n'
  '4. **Entry Points**:\n'
  '   - **Constructor (`__init__`)**: The constructor of the `CreateAnalyses` '
  'class serves as an entry point for initializing the analysis with the '
  'provided data.\n'
  '   - **`create_intra_analyses` Method**: This method is called within the '
  'constructor if `intra_id_list` and `intra_metrics` are provided.\n'
  '   - **`create_inter_analyses` Method**: This method is called within the '
  'constructor if `inter_id_list` and `inter_metrics` are provided.\n'
  '   - **`find_intra_ratings` Method**: This method is called within '
  '`create_intra_analyses` to process intra-ratings.\n'
  '   - **`find_inter_ratings` Method**: This method is called within '
  '`create_inter_analyses` to process inter-ratings.\n'
  '\n'
  'The provided code primarily focuses on data analysis and manipulation using '
  'Pandas and a custom `Metrics` class, with no explicit mention of user roles '
  'or external systems beyond the libraries and modules it imports.'],
 ['C:\\Users\\t.kubera\\dev\\hackathon\\hackathon_code_gen\\resources\\IIRA\\core\\fileinteraction.py',
  '### Summary:\n'
  '\n'
  '1. **External Systems**:\n'
  '   - **File Systems**: The code interacts with the local file system to '
  'read and write files in various formats (e.g., `.xlsx`, `.xls`, `.ods`, '
  '`.csv`).\n'
  '   - **Pandas Library**: Used for reading and manipulating data from '
  'files.\n'
  '   - **XlsxWriter Library**: Used for writing data to Excel files.\n'
  '\n'
  '2. **User Roles**:\n'
  '   - **Not Applicable**: The file does not explicitly define any user roles '
  'or actors that interact with the system.\n'
  '\n'
  '3. **Data Flows**:\n'
  '   - **Input Data Flows**:\n'
  '     - Reading data from files (Excel, ODS, CSV) into Pandas DataFrames.\n'
  '   - **Output Data Flows**:\n'
  '     - Writing processed data back to files (Excel, ODS, CSV).\n'
  '   - **Internal Data Flows**:\n'
  '     - Data is processed and manipulated within the system, such as finding '
  'categories, rater IDs, text, and labels.\n'
  '\n'
  '4. **Entry Points**:\n'
  '   - **FileValidation Class**:\n'
  '     - `__init__`: Initializes the class and processes the input file.\n'
  '     - `check_format`: Determines the format of the input file.\n'
  '     - `find_categories`: Extracts categories from the content.\n'
  '     - `find_rater_ids`: Extracts rater IDs from the content.\n'
  '     - `find_text`: Extracts text from the content.\n'
  '     - `find_labels`: Extracts labels from the content.\n'
  '     - `write_file`: Writes the processed data to a file.\n'
  '   - **DBInteraction Class**:\n'
  '     - `__init__`: Initializes the class and loads the database.\n'
  '     - `load_profiles`: Loads profiles from the database.\n'
  '     - `create_profile`: Creates a new profile.\n'
  '     - `delete_profile`: Deletes the current profile.\n'
  '     - `change_profile`: Changes the active profile.\n'
  '     - `write_to_db`: Writes the profiles back to the database.\n'
  '   - **write_excel Function**: Writes analysis results to an Excel file.\n'
  '\n'
  'This summary captures the key elements from the provided file content, '
  'which can be used to create a system context diagram.'],
 ['C:\\Users\\t.kubera\\dev\\hackathon\\hackathon_code_gen\\resources\\IIRA\\core\\metrics.py',
  '### Summary:\n'
  '\n'
  '1. **External Systems**: \n'
  '   - The file interacts with the `irrCAC` library, specifically the `CAC` '
  'class from `irrCAC.raw`, which is used for various reliability analyses.\n'
  '   - The file also interacts with the `pingouin` library for intraclass '
  'correlation calculations.\n'
  '   - Additionally, it uses the `pandas` library for data manipulation and '
  '`numpy` for numerical operations.\n'
  '   - These libraries are not considered external systems as per the given '
  'criteria, so: **Not Applicable**.\n'
  '\n'
  '2. **User Roles**: \n'
  '   - The file does not explicitly define any user roles or actors that '
  'interact with the system. The code appears to be focused on performing '
  'statistical analyses rather than handling user interactions.\n'
  '   - **Not Applicable**.\n'
  '\n'
  '3. **Data Flows**: \n'
  '   - **Incoming Data**: The `Metrics` class constructor (`__init__`) '
  'receives data in the form of `scale_format`, `categories`, `ratings`, and '
  '`weights`.\n'
  '   - **Outgoing Data**: The methods `cohens_kappa`, `fleiss_kappa`, '
  '`gwets_ac`, and `krippendorfs_alpha` return specific coefficient values '
  'from the analysis.\n'
  '   - The `icc` method processes data and returns an intraclass correlation '
  'coefficient.\n'
  '   - The `overall_agreement` method calculates and returns an overall '
  'agreement value.\n'
  '   - **Data Flows**: The primary data flow is the input of ratings and '
  'categories into the `Metrics` class and the output of various statistical '
  'metrics.\n'
  '\n'
  '4. **Entry Points**: \n'
  '   - The constructor `__init__` of the `Metrics` class serves as an entry '
  'point for initializing the analysis with the provided data.\n'
  '   - The methods `cohens_kappa`, `fleiss_kappa`, `gwets_ac`, '
  '`krippendorfs_alpha`, `icc`, and `overall_agreement` serve as entry points '
  'for retrieving specific analysis results.\n'
  '   - The `map_metrics` function serves as an entry point for mapping metric '
  'names to their corresponding method names.\n'
  '\n'
  '### Detailed Summary:\n'
  '\n'
  '1. **External Systems**: Not Applicable.\n'
  '\n'
  '2. **User Roles**: Not Applicable.\n'
  '\n'
  '3. **Data Flows**: \n'
  '   - **Incoming Data**: \n'
  '     - `__init__(self, scale_format, categories, ratings, weights)`\n'
  '   - **Outgoing Data**: \n'
  '     - `cohens_kappa(self)`\n'
  '     - `fleiss_kappa(self)`\n'
  '     - `gwets_ac(self)`\n'
  '     - `krippendorfs_alpha(self)`\n'
  '     - `icc(self)`\n'
  '     - `overall_agreement(self)`\n'
  '\n'
  '4. **Entry Points**: \n'
  '   - `__init__(self, scale_format, categories, ratings, weights)`\n'
  '   - `cohens_kappa(self)`\n'
  '   - `fleiss_kappa(self)`\n'
  '   - `gwets_ac(self)`\n'
  '   - `krippendorfs_alpha(self)`\n'
  '   - `icc(self)`\n'
  '   - `overall_agreement(self)`\n'
  '   - `map_metrics(metric)`'],
 ['C:\\Users\\t.kubera\\dev\\hackathon\\hackathon_code_gen\\resources\\IIRA\\core\\__init__.py',
  'Sure, I can help with that. Please provide the content of the file you are '
  'analyzing from the GitHub repository.'],
 ['C:\\Users\\t.kubera\\dev\\hackathon\\hackathon_code_gen\\resources\\IIRA\\data\\__init__.py',
  'Sure, I can help with that. Please provide the content of the file you are '
  'analyzing from the GitHub repository.'],
 ['C:\\Users\\t.kubera\\dev\\hackathon\\hackathon_code_gen\\resources\\IIRA\\gui\\analyseframe.py',
  '### Summary:\n'
  '\n'
  '1. **External Systems**: \n'
  '   - **Excel File Interaction**: The `write_excel` function from the '
  '`core.fileinteraction` module is used to export data to Excel files. This '
  'indicates interaction with the file system for reading/writing Excel '
  'files.\n'
  '   - **Message Box**: The `messagebox` from `tkinter` is used to display '
  'error messages to the user, which is a part of the GUI system.\n'
  '\n'
  '2. **User Roles**: \n'
  '   - **User**: The primary user role is the end-user who interacts with the '
  'GUI to select raters and metrics, start the analysis, and view/export '
  'results.\n'
  '\n'
  '3. **Data Flows**: \n'
  '   - **Input Data**: User selections for raters and metrics are collected '
  'through the GUI.\n'
  '   - **Output Data**: Analysis results are displayed in the GUI and can be '
  'exported to an Excel file.\n'
  '   - **Error Messages**: Error messages are displayed to the user via '
  'message boxes when invalid input is detected.\n'
  '\n'
  '4. **Entry Points**: \n'
  '   - **`__init__` method of `AnalyseFrame` class**: Initializes the frame '
  'and sets up the GUI components.\n'
  '   - **`analyse_start` method of `AnalyseFrame` class**: Triggered when the '
  'user clicks the "Analyse Starten" button, initiating the analysis process.\n'
  '   - **`populate_rater_container` method of `AnalyseFrame` class**: '
  'Populates the rater selection container.\n'
  '   - **`populate_metrics_container` method of `AnalyseFrame` class**: '
  'Populates the metrics selection container.\n'
  '   - **`update_frame` method of `AnalyseFrame` class**: Updates the frame '
  'with the latest data.\n'
  '   - **`__init__` method of `ResultsFrame` class**: Initializes the results '
  'frame and sets up the GUI components.\n'
  '   - **`calculate_results` method of `ResultsFrame` class**: Calculates the '
  'analysis results.\n'
  '   - **`populate_intra_results` method of `ResultsFrame` class**: Populates '
  'the intra-rater results.\n'
  '   - **`populate_inter_results` method of `ResultsFrame` class**: Populates '
  'the inter-rater results.\n'
  '   - **`export_cmd` method of `ResultsFrame` class**: Handles the export of '
  'results to an Excel file.\n'
  '   - **`update_frame` method of `ResultsFrame` class**: Updates the frame '
  'with the latest results.\n'
  '\n'
  'This summary provides a clear understanding of the key elements required '
  'for creating a system context diagram based on the provided file content.'],
 ['C:\\Users\\t.kubera\\dev\\hackathon\\hackathon_code_gen\\resources\\IIRA\\gui\\containerframe.py',
  '### Summary:\n'
  '\n'
  '1. **External Systems**: \n'
  '   - **Not Applicable**: The file does not interact with any external '
  'systems or services such as databases, web services, or third-party APIs. '
  'It primarily deals with GUI elements using the `tkinter` library.\n'
  '\n'
  '2. **User Roles**: \n'
  '   - **Not Applicable**: The file does not define specific user roles or '
  'actors. It focuses on the GUI components and their interactions within the '
  'application.\n'
  '\n'
  '3. **Data Flows**: \n'
  '   - **Not Applicable**: There are no explicit data flows into or out of '
  'the system in this file. The file is concerned with the layout and behavior '
  'of GUI elements, and does not handle data exchange with external entities.\n'
  '\n'
  '4. **Entry Points**: \n'
  '   - **`__init__` method of `ContainerFrame` class**: Initializes the frame '
  'and sets up the menu bar.\n'
  '   - **`init_menu_bar` method**: Sets up the menu bar with various frames '
  'and labels.\n'
  '   - **`profile_cmd` method**: Invoked when the profile label is clicked, '
  'initializes the `ProfileFrame`.\n'
  '   - **`home_cmd` method**: Invoked when the home label is clicked, '
  'initializes and shows the main frame.\n'
  '   - **`help_cmd` method**: Placeholder for help command, currently raises '
  '`NotImplementedError`.\n'
  '   - **`on_enter` and `on_leave` methods**: Handle mouse enter and leave '
  'events for frames and labels.\n'
  '   - **`toggle_color_mode` method**: Toggles between light and dark mode '
  'themes.\n'
  '   - **`create_table` method**: Creates a table with given headings and '
  'content.\n'
  '   - **`update_frame` method**: Placeholder for updating the frame, '
  'currently raises `NotImplementedError`.\n'
  '\n'
  'The file is primarily focused on the graphical user interface and does not '
  'interact with external systems, define user roles, or handle data flows. '
  'The entry points are mainly methods that initialize and manage GUI '
  'components.'],
 ['C:\\Users\\t.kubera\\dev\\hackathon\\hackathon_code_gen\\resources\\IIRA\\gui\\fileframes.py',
  '### Summary:\n'
  '\n'
  '1. **External Systems**: \n'
  '   - The file interacts with the file system to open and read files using '
  '`tk.filedialog.askopenfilename`.\n'
  '   - It also uses the `FileValidation` class from the '
  '`core.fileinteraction` module, which likely involves some form of file '
  'validation or processing.\n'
  '\n'
  '2. **User Roles**: \n'
  '   - The file does not explicitly define user roles, but it implies '
  'interaction with end-users who are using the GUI to import and analyze '
  'files.\n'
  '\n'
  '3. **Data Flows**: \n'
  '   - **Incoming Data**: Files are selected and imported by the user through '
  'the `select_file` method, which reads data from the file system.\n'
  '   - **Outgoing Data**: Data from the imported files is processed and '
  'stored in various attributes of the `container` object (e.g., '
  '`container.categories`, `container.rater_ids`, `container.text`, etc.).\n'
  '\n'
  '4. **Entry Points**: \n'
  '   - `__init__` methods in both `ScaleFrame` and `FileFrame` classes serve '
  'as initial entry points for setting up the GUI components.\n'
  '   - `select_file` method in the `FileFrame` class is an entry point for '
  'file selection and importing data.\n'
  '   - `next_cmd` method in the `ScaleFrame` class is an entry point for '
  'proceeding to the next step in the GUI workflow.\n'
  '   - `update_frame` methods in both `ScaleFrame` and `FileFrame` classes '
  'are entry points for updating the GUI based on the current state or user '
  'actions.\n'
  '\n'
  '---\n'
  '\n'
  'This summary captures the key elements required for creating a system '
  'context diagram based on the provided file content. If you need further '
  'details or additional files analyzed, please let me know!'],
 ['C:\\Users\\t.kubera\\dev\\hackathon\\hackathon_code_gen\\resources\\IIRA\\gui\\helperframes.py',
  '### Summary:\n'
  '\n'
  '1. **External Systems**:\n'
  '   - **Database**: The code interacts with a database through the '
  '`self.container.dbinteraction` object. This is evident from methods like '
  '`self.container.dbinteraction.active_profile`, '
  '`self.container.dbinteraction.profiles`, '
  '`self.container.dbinteraction.create_profile`, '
  '`self.container.dbinteraction.change_profile`, and '
  '`self.container.dbinteraction.delete_profile`.\n'
  '   - **Web Browser**: The `webbrowser` module is used to open URLs, as seen '
  'in the `callback` function.\n'
  '\n'
  '2. **User Roles**:\n'
  '   - **Profile Manager**: Users who manage profiles, including creating, '
  'deleting, and switching profiles.\n'
  '   - **Help Viewer**: Users who view help content through various help '
  'frames (e.g., `MainHelpFrame`, `ScaleHelpFrame`, `ImportHelpFrame`, '
  '`PrepAnalyseHelpFrame`, `ResultsHelpFrame`, `RateHelpFrame`).\n'
  '\n'
  '3. **Data Flows**:\n'
  '   - **Into the System**:\n'
  '     - User input for creating new profiles (`self.user_input.get()`).\n'
  '     - URLs for help content are predefined in the `urls` list.\n'
  '   - **Out of the System**:\n'
  '     - Profile data is sent to the database when creating, changing, or '
  'deleting profiles.\n'
  '     - URLs are opened in the web browser through the `callback` function.\n'
  '\n'
  '4. **Entry Points**:\n'
  '   - **Profile Management**:\n'
  '     - `create_new_profile`: Initiates the creation of a new profile.\n'
  '     - `delete_profile`: Deletes the current profile.\n'
  '     - `change_profile`: Changes the active profile.\n'
  '     - `ok_cmd`: Confirms the creation of a new profile or closes the '
  'window if no input is provided.\n'
  '   - **Help Content**:\n'
  '     - `callback`: Opens a URL in the web browser.\n'
  '     - Various `__init__` methods in help frame classes (e.g., '
  '`MainHelpFrame`, `ScaleHelpFrame`, `ImportHelpFrame`, '
  '`PrepAnalyseHelpFrame`, `ResultsHelpFrame`, `RateHelpFrame`) initialize and '
  'display help content.\n'
  '\n'
  '### Detailed Analysis:\n'
  '\n'
  '- **External Systems**:\n'
  '  - The database interaction is a significant external system, as the code '
  'frequently accesses and modifies profile data stored in the database.\n'
  '  - The `webbrowser` module is used to open external URLs, making it '
  'another external system.\n'
  '\n'
  '- **User Roles**:\n'
  '  - The code defines interactions for users managing profiles and viewing '
  'help content, indicating these as primary user roles.\n'
  '\n'
  '- **Data Flows**:\n'
  '  - Data flows into the system primarily through user input for profile '
  'management.\n'
  '  - Data flows out of the system to the database and the web browser.\n'
  '\n'
  '- **Entry Points**:\n'
  '  - The entry points for profile management and help content are clearly '
  'defined through specific methods and class initializations.\n'
  '\n'
  'This summary provides a comprehensive overview of the key elements required '
  'for creating a system context diagram based on the provided file content.'],
 ['C:\\Users\\t.kubera\\dev\\hackathon\\hackathon_code_gen\\resources\\IIRA\\gui\\mainframe.py',
  '### Summary:\n'
  '\n'
  '1. **External Systems**: \n'
  '   - **Database Interaction**: The file references '
  '`container.dbinteraction`, which suggests interaction with a database '
  'system. Specifically, the method `create_profile` is called on '
  '`self.container.dbinteraction`, indicating that the system can create '
  'profiles in a database.\n'
  '   - **File Interaction**: The import statement `from core.fileinteraction '
  'import FileValidation` and the class name `FileValidation` suggest that the '
  'system interacts with files, likely for validation purposes.\n'
  '\n'
  '2. **User Roles**: \n'
  '   - **General User**: The file includes GUI elements and user prompts, '
  'such as profile creation and analysis/rating actions, indicating '
  'interaction with a general user role. The user is expected to import '
  'datasets, perform analyses, and create profiles.\n'
  '\n'
  '3. **Data Flows**: \n'
  '   - **Data Inflow**: \n'
  '     - User Input: The `no_profile` method collects user input for profile '
  'creation.\n'
  '     - File Import: The GUI prompts users to import datasets, indicating '
  'data inflow from files.\n'
  '   - **Data Outflow**: \n'
  '     - Database: The `create_profile` method suggests data outflow to a '
  'database when creating a new profile.\n'
  '     - GUI Updates: The `start_mode` method updates the GUI based on user '
  'actions, indicating internal data flow within the system.\n'
  '\n'
  '4. **Entry Points**: \n'
  '   - **__init__**: Initializes the `MainFrame` and sets up the GUI '
  'components.\n'
  '   - **start_mode**: Triggered by user actions (e.g., button clicks) to '
  'change the mode of the application.\n'
  '   - **no_profile**: Triggered when no active profile is detected, '
  'prompting the user to create a new profile.\n'
  '   - **help_cmd**: Opens the help frame, likely providing user assistance.\n'
  '\n'
  'Overall, the file primarily deals with GUI setup and user interactions, '
  'with some references to database and file interactions.'],
 ['C:\\Users\\t.kubera\\dev\\hackathon\\hackathon_code_gen\\resources\\IIRA\\gui\\rateframe.py',
  '### Summary:\n'
  '\n'
  '1. **External Systems**:\n'
  '   - **Database Interaction**: The file references '
  '`container.dbinteraction.active_profile`, indicating interaction with a '
  'database system to fetch the active user profile.\n'
  '   - **File System**: The `save_cmd` method uses '
  '`tk.filedialog.asksaveasfilename` to interact with the file system for '
  'saving files.\n'
  '   - **Message Box**: The `messagebox` module is used for displaying '
  'message boxes to the user, which can be considered an interaction with the '
  'GUI system.\n'
  '\n'
  '2. **User Roles**:\n'
  '   - **User**: The code is designed for a user who interacts with the GUI '
  'to rate text elements, save their ratings, and navigate through the text '
  'elements.\n'
  '\n'
  '3. **Data Flows**:\n'
  '   - **Input Data**: User inputs ratings through the GUI, which are stored '
  'in the `ratings` list.\n'
  '   - **Output Data**: Ratings are saved to a file when the user invokes the '
  '`save_cmd` method.\n'
  '   - **Database Data**: The active user profile is fetched from the '
  'database (`container.dbinteraction.active_profile`).\n'
  '\n'
  '4. **Entry Points**:\n'
  '   - **__init__**: Initializes the `RateFrame` and sets up the GUI '
  'components.\n'
  '   - **populate_navigation**: Populates the navigation tree view with text '
  'elements.\n'
  '   - **randomize**: Randomizes the order of text elements and their '
  'corresponding ratings.\n'
  '   - **doubleclick_treeview**: Handles double-click events on the tree view '
  'to navigate to a specific text element.\n'
  '   - **entry_input_cmd**: Handles the event when the user inputs a rating '
  'through the entry field.\n'
  '   - **cat_hotkey_cmd**: Handles hotkey commands for category selection.\n'
  '   - **next_cmd**: Moves to the next text element.\n'
  '   - **prev_cmd**: Moves to the previous text element.\n'
  '   - **save_cmd**: Saves the ratings to a file.\n'
  '   - **delete_cmd**: Deletes all ratings and resets the session.\n'
  '   - **label_text**: Updates the rating for the current text element.\n'
  '   - **populate_percentage**: Updates the percentage of rated text '
  'elements.\n'
  '   - **home_cmd**: Handles the command to return to the home screen.\n'
  '   - **help_cmd**: Displays the help frame.\n'
  '   - **update_frame**: Updates the frame with new text elements and '
  'ratings.\n'
  '\n'
  'If you need further details or have additional questions, feel free to '
  'ask!'],
 ['C:\\Users\\t.kubera\\dev\\hackathon\\hackathon_code_gen\\resources\\IIRA\\gui\\__init__.py',
  'Sure, I can help with that. Please provide the content of the file you are '
  'analyzing from the GitHub repository.']]
